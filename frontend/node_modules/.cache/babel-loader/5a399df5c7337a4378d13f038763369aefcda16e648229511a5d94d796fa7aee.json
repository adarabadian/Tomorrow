{"ast":null,"code":"// Helper function to map the backend Alert model to our frontend Alert model\nexport const mapBackendAlert = backendAlert => {\n  const isTriggered = backendAlert.isTriggered === true;\n  const status = isTriggered ? 'active' : 'inactive';\n  return {\n    id: backendAlert.id || backendAlert._id,\n    _id: backendAlert._id || backendAlert.id,\n    name: backendAlert.name,\n    location: backendAlert.location,\n    resolvedLocation: backendAlert.resolvedLocation,\n    parameter: backendAlert.parameter,\n    threshold: backendAlert.threshold,\n    condition: backendAlert.condition,\n    description: backendAlert.description,\n    userEmail: backendAlert.userEmail || '',\n    status: status,\n    isTriggered: isTriggered,\n    lastChecked: backendAlert.lastChecked || new Date().toISOString(),\n    lastValue: backendAlert.lastValue\n  };\n};","map":{"version":3,"names":["mapBackendAlert","backendAlert","isTriggered","status","id","_id","name","location","resolvedLocation","parameter","threshold","condition","description","userEmail","lastChecked","Date","toISOString","lastValue"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/types/alert.ts"],"sourcesContent":["import { evaluateAlertCondition } from '../utils/alertUtils';\r\n\r\nexport interface Alert {\r\n  id: string;\r\n  _id: string; // MongoDB-style ID for compatibility\r\n  name: string;\r\n  location: {\r\n    city?: string;\r\n    coordinates?: {\r\n      lat: number;\r\n      lon: number;\r\n    };\r\n  };\r\n  resolvedLocation?: string;\r\n  parameter: string;\r\n  threshold: number;\r\n  condition: string;\r\n  userEmail: string;\r\n  description?: string;\r\n  status: 'active' | 'inactive';\r\n  isTriggered: boolean;\r\n  lastChecked: string;\r\n  lastValue?: number;\r\n}\r\n\r\nexport interface CreateAlertPayload {\r\n  name: string;\r\n  location: {\r\n    city?: string;\r\n    coordinates?: {\r\n      lat: number;\r\n      lon: number;\r\n    };\r\n  };\r\n  parameter: string;\r\n  threshold: number;\r\n  condition: string;\r\n  description?: string;\r\n  userEmail: string;\r\n}\r\n\r\nexport interface AlertSummary {\r\n  id: string;\r\n  name: string;\r\n  parameter: string;\r\n  isTriggered: boolean;\r\n}\r\n\r\n// Helper function to map the backend Alert model to our frontend Alert model\r\nexport const mapBackendAlert = (backendAlert: any): Alert => {\r\n  const isTriggered = backendAlert.isTriggered === true;\r\n  const status = isTriggered ? 'active' : 'inactive';\r\n  \r\n  return {\r\n    id: backendAlert.id || backendAlert._id,\r\n    _id: backendAlert._id || backendAlert.id,\r\n    name: backendAlert.name,\r\n    location: backendAlert.location,\r\n    resolvedLocation: backendAlert.resolvedLocation,\r\n    parameter: backendAlert.parameter,\r\n    threshold: backendAlert.threshold,\r\n    condition: backendAlert.condition,\r\n    description: backendAlert.description,\r\n    userEmail: backendAlert.userEmail || '',\r\n    status: status,\r\n    isTriggered: isTriggered,\r\n    lastChecked: backendAlert.lastChecked || new Date().toISOString(),\r\n    lastValue: backendAlert.lastValue\r\n  };\r\n}; "],"mappings":"AAgDA;AACA,OAAO,MAAMA,eAAe,GAAIC,YAAiB,IAAY;EAC3D,MAAMC,WAAW,GAAGD,YAAY,CAACC,WAAW,KAAK,IAAI;EACrD,MAAMC,MAAM,GAAGD,WAAW,GAAG,QAAQ,GAAG,UAAU;EAElD,OAAO;IACLE,EAAE,EAAEH,YAAY,CAACG,EAAE,IAAIH,YAAY,CAACI,GAAG;IACvCA,GAAG,EAAEJ,YAAY,CAACI,GAAG,IAAIJ,YAAY,CAACG,EAAE;IACxCE,IAAI,EAAEL,YAAY,CAACK,IAAI;IACvBC,QAAQ,EAAEN,YAAY,CAACM,QAAQ;IAC/BC,gBAAgB,EAAEP,YAAY,CAACO,gBAAgB;IAC/CC,SAAS,EAAER,YAAY,CAACQ,SAAS;IACjCC,SAAS,EAAET,YAAY,CAACS,SAAS;IACjCC,SAAS,EAAEV,YAAY,CAACU,SAAS;IACjCC,WAAW,EAAEX,YAAY,CAACW,WAAW;IACrCC,SAAS,EAAEZ,YAAY,CAACY,SAAS,IAAI,EAAE;IACvCV,MAAM,EAAEA,MAAM;IACdD,WAAW,EAAEA,WAAW;IACxBY,WAAW,EAAEb,YAAY,CAACa,WAAW,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACjEC,SAAS,EAAEhB,YAAY,CAACgB;EAC1B,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}