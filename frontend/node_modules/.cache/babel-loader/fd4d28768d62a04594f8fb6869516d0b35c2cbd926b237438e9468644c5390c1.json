{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adara\\\\Desktop\\\\aaa\\\\Tomorrow\\\\frontend\\\\src\\\\contexts\\\\WeatherContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { fetchCurrentWeather } from '../services/weatherService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherContext = /*#__PURE__*/createContext(undefined);\nexport const WeatherProvider = ({\n  children\n}) => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [location, setLocation] = useState('');\n  const fetchWeather = useCallback(async locationParam => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await fetchCurrentWeather(locationParam);\n      setWeather(data);\n\n      // Set the display location text\n      if ('city' in locationParam) {\n        setLocation(locationParam.city);\n      } else {\n        setLocation(`${locationParam.lat.toFixed(2)}, ${locationParam.lon.toFixed(2)}`);\n      }\n    } catch (err) {\n      setError('Failed to load weather data. Please check the location and try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const getCurrentLocation = useCallback(() => {\n    if (navigator.geolocation) {\n      setLoading(true);\n      navigator.geolocation.getCurrentPosition(position => {\n        fetchWeather({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n      }, error => {\n        setError('Unable to retrieve your location. Please enter it manually.');\n        setLoading(false);\n      });\n    } else {\n      setError('Geolocation is not supported by your browser. Please enter your location manually.');\n    }\n  }, [fetchWeather]);\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: {\n      weather,\n      loading,\n      error,\n      location,\n      fetchWeather,\n      getCurrentLocation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherProvider, \"ny0UGAEmyS3orp9dHnpy0oSuRcE=\");\n_c = WeatherProvider;\nexport const useWeather = () => {\n  _s2();\n  const context = useContext(WeatherContext);\n  if (context === undefined) {\n    throw new Error('useWeather must be used within a WeatherProvider');\n  }\n  return context;\n};\n_s2(useWeather, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WeatherProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","fetchCurrentWeather","jsxDEV","_jsxDEV","WeatherContext","undefined","WeatherProvider","children","_s","weather","setWeather","loading","setLoading","error","setError","location","setLocation","fetchWeather","locationParam","data","city","lat","toFixed","lon","err","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWeather","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/contexts/WeatherContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport { WeatherData } from '../types/weather';\r\nimport { fetchCurrentWeather } from '../services/weatherService';\r\n\r\ninterface WeatherContextType {\r\n  weather: WeatherData | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  location: string;\r\n  fetchWeather: (location: { city: string } | { lat: number; lon: number }) => Promise<void>;\r\n  getCurrentLocation: () => void;\r\n}\r\n\r\nconst WeatherContext = createContext<WeatherContextType | undefined>(undefined);\r\n\r\nexport const WeatherProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [weather, setWeather] = useState<WeatherData | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [location, setLocation] = useState<string>('');\r\n\r\n  const fetchWeather = useCallback(async (locationParam: { city: string } | { lat: number; lon: number }) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await fetchCurrentWeather(locationParam);\r\n      setWeather(data);\r\n      \r\n      // Set the display location text\r\n      if ('city' in locationParam) {\r\n        setLocation(locationParam.city);\r\n      } else {\r\n        setLocation(`${locationParam.lat.toFixed(2)}, ${locationParam.lon.toFixed(2)}`);\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to load weather data. Please check the location and try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const getCurrentLocation = useCallback(() => {\r\n    if (navigator.geolocation) {\r\n      setLoading(true);\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          fetchWeather({ \r\n            lat: position.coords.latitude, \r\n            lon: position.coords.longitude \r\n          });\r\n        },\r\n        (error) => {\r\n          setError('Unable to retrieve your location. Please enter it manually.');\r\n          setLoading(false);\r\n        }\r\n      );\r\n    } else {\r\n      setError('Geolocation is not supported by your browser. Please enter your location manually.');\r\n    }\r\n  }, [fetchWeather]);\r\n\r\n  return (\r\n    <WeatherContext.Provider value={{ \r\n      weather, \r\n      loading, \r\n      error, \r\n      location,\r\n      fetchWeather,\r\n      getCurrentLocation\r\n    }}>\r\n      {children}\r\n    </WeatherContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useWeather = () => {\r\n  const context = useContext(WeatherContext);\r\n  if (context === undefined) {\r\n    throw new Error('useWeather must be used within a WeatherProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}