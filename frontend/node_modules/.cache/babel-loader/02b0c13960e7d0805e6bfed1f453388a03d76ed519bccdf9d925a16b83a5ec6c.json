{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adara\\\\Desktop\\\\aaa\\\\Tomorrow\\\\frontend\\\\src\\\\contexts\\\\AlertsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { getAlerts } from '../services/alertService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlertsContext = /*#__PURE__*/createContext(undefined);\nexport const AlertsProvider = ({\n  children\n}) => {\n  _s();\n  const [alerts, setAlerts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const refreshAlerts = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('Refreshing alerts from server...');\n      // Force-fetch the latest data from the server\n      const data = await getAlerts();\n      console.log('Got alerts from server:', data);\n\n      // Map the alerts to ensure isTriggered is correctly calculated\n      if (data && Array.isArray(data)) {\n        console.log(`Processed ${data.length} alerts with recalculated status`);\n        setAlerts(data);\n        setLastUpdated(new Date());\n      } else {\n        console.error('Invalid alert data received:', data);\n        setError('Failed to process alert data');\n      }\n    } catch (err) {\n      console.error('Failed to load alerts:', err);\n      setError('Failed to load alerts');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Initial load\n  useEffect(() => {\n    refreshAlerts();\n  }, [refreshAlerts]);\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(refreshAlerts, 30000);\n    return () => clearInterval(interval);\n  }, [refreshAlerts]);\n  return /*#__PURE__*/_jsxDEV(AlertsContext.Provider, {\n    value: {\n      alerts,\n      loading,\n      error,\n      refreshAlerts,\n      lastUpdated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(AlertsProvider, \"7YvnvZFekXbLCwIXaNGPccgjXsI=\");\n_c = AlertsProvider;\nexport const useAlerts = () => {\n  _s2();\n  const context = useContext(AlertsContext);\n  if (context === undefined) {\n    throw new Error('useAlerts must be used within an AlertsProvider');\n  }\n  return context;\n};\n_s2(useAlerts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AlertsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","getAlerts","jsxDEV","_jsxDEV","AlertsContext","undefined","AlertsProvider","children","_s","alerts","setAlerts","loading","setLoading","error","setError","lastUpdated","setLastUpdated","refreshAlerts","console","log","data","Array","isArray","length","Date","err","interval","setInterval","clearInterval","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAlerts","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/contexts/AlertsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport { Alert } from '../types/alert';\r\nimport { getAlerts } from '../services/alertService';\r\n\r\ninterface AlertsContextType {\r\n  alerts: Alert[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refreshAlerts: () => Promise<void>;\r\n  lastUpdated: Date | null;\r\n}\r\n\r\nconst AlertsContext = createContext<AlertsContextType | undefined>(undefined);\r\n\r\nexport const AlertsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [alerts, setAlerts] = useState<Alert[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n\r\n  const refreshAlerts = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log('Refreshing alerts from server...');\r\n      // Force-fetch the latest data from the server\r\n      const data = await getAlerts();\r\n      console.log('Got alerts from server:', data);\r\n      \r\n      // Map the alerts to ensure isTriggered is correctly calculated\r\n      if (data && Array.isArray(data)) {\r\n        console.log(`Processed ${data.length} alerts with recalculated status`);\r\n        setAlerts(data);\r\n        setLastUpdated(new Date());\r\n      } else {\r\n        console.error('Invalid alert data received:', data);\r\n        setError('Failed to process alert data');\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to load alerts:', err);\r\n      setError('Failed to load alerts');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    refreshAlerts();\r\n  }, [refreshAlerts]);\r\n\r\n  // Auto-refresh every 30 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(refreshAlerts, 30000);\r\n    return () => clearInterval(interval);\r\n  }, [refreshAlerts]);\r\n\r\n  return (\r\n    <AlertsContext.Provider value={{ alerts, loading, error, refreshAlerts, lastUpdated }}>\r\n      {children}\r\n    </AlertsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAlerts = () => {\r\n  const context = useContext(AlertsContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAlerts must be used within an AlertsProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAE1F,SAASC,SAAS,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUrD,MAAMC,aAAa,gBAAGR,aAAa,CAAgCS,SAAS,CAAC;AAE7E,OAAO,MAAMC,cAAuD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAU,EAAE,CAAC;EACjD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAc,IAAI,CAAC;EAEjE,MAAMmB,aAAa,GAAGjB,WAAW,CAAC,YAAY;IAC5CY,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACFI,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C;MACA,MAAMC,IAAI,GAAG,MAAMnB,SAAS,CAAC,CAAC;MAC9BiB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,IAAI,CAAC;;MAE5C;MACA,IAAIA,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;QAC/BF,OAAO,CAACC,GAAG,CAAC,aAAaC,IAAI,CAACG,MAAM,kCAAkC,CAAC;QACvEb,SAAS,CAACU,IAAI,CAAC;QACfJ,cAAc,CAAC,IAAIQ,IAAI,CAAC,CAAC,CAAC;MAC5B,CAAC,MAAM;QACLN,OAAO,CAACL,KAAK,CAAC,8BAA8B,EAAEO,IAAI,CAAC;QACnDN,QAAQ,CAAC,8BAA8B,CAAC;MAC1C;IACF,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZP,OAAO,CAACL,KAAK,CAAC,wBAAwB,EAAEY,GAAG,CAAC;MAC5CX,QAAQ,CAAC,uBAAuB,CAAC;IACnC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAb,SAAS,CAAC,MAAM;IACdkB,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;;EAEnB;EACAlB,SAAS,CAAC,MAAM;IACd,MAAM2B,QAAQ,GAAGC,WAAW,CAACV,aAAa,EAAE,KAAK,CAAC;IAClD,OAAO,MAAMW,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACT,aAAa,CAAC,CAAC;EAEnB,oBACEd,OAAA,CAACC,aAAa,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAErB,MAAM;MAAEE,OAAO;MAAEE,KAAK;MAAEI,aAAa;MAAEF;IAAY,CAAE;IAAAR,QAAA,EACnFA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAC1B,EAAA,CAhDWF,cAAuD;AAAA6B,EAAA,GAAvD7B,cAAuD;AAkDpE,OAAO,MAAM8B,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAGzC,UAAU,CAACO,aAAa,CAAC;EACzC,IAAIkC,OAAO,KAAKjC,SAAS,EAAE;IACzB,MAAM,IAAIkC,KAAK,CAAC,iDAAiD,CAAC;EACpE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}