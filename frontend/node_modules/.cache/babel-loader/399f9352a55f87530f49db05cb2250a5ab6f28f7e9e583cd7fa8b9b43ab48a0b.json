{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// Create a configured axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for logging or auth tokens if needed\napiClient.interceptors.request.use(config => {\n  // Add authorization header or other global headers here if needed\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor for common error handling\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2, _error$response3, _error$response3$data;\n  // Log errors\n  console.error('API Error:', error);\n\n  // Handle specific error cases (can be extended)\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized\n    console.log('Unauthorized - redirect to login or refresh token');\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n    // Handle not found\n    console.log('Resource not found');\n  }\n\n  // Extract meaningful error message if available\n  const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message || 'An unknown error occurred';\n\n  // Wrap error with better message\n  const enhancedError = new Error(errorMessage);\n  return Promise.reject(enhancedError);\n});\n\n// Generic request function\nexport const request = async config => {\n  try {\n    const response = await apiClient(config);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Helper methods for common HTTP methods\nexport const get = (url, params) => {\n  return request({\n    method: 'GET',\n    url,\n    params\n  });\n};\nexport const post = (url, data) => {\n  return request({\n    method: 'POST',\n    url,\n    data\n  });\n};\nexport const put = (url, data) => {\n  return request({\n    method: 'PUT',\n    url,\n    data\n  });\n};\nexport const del = url => {\n  return request({\n    method: 'DELETE',\n    url\n  });\n};\nexport default {\n  get,\n  post,\n  put,\n  delete: del\n};","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","_error$response","_error$response2","_error$response3","_error$response3$data","console","status","log","errorMessage","data","message","enhancedError","Error","get","url","params","method","post","put","del","delete"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/services/apiClient.ts"],"sourcesContent":["import axios, { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\n// Create a configured axios instance\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add request interceptor for logging or auth tokens if needed\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    // Add authorization header or other global headers here if needed\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor for common error handling\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error: AxiosError) => {\r\n    // Log errors\r\n    console.error('API Error:', error);\r\n    \r\n    // Handle specific error cases (can be extended)\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized\r\n      console.log('Unauthorized - redirect to login or refresh token');\r\n    } else if (error.response?.status === 404) {\r\n      // Handle not found\r\n      console.log('Resource not found');\r\n    }\r\n    \r\n    // Extract meaningful error message if available\r\n    const errorMessage = error.response?.data?.error || error.message || 'An unknown error occurred';\r\n    \r\n    // Wrap error with better message\r\n    const enhancedError = new Error(errorMessage);\r\n    return Promise.reject(enhancedError);\r\n  }\r\n);\r\n\r\n// Generic request function\r\nexport const request = async <T>(config: AxiosRequestConfig): Promise<T> => {\r\n  try {\r\n    const response: AxiosResponse<T> = await apiClient(config);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper methods for common HTTP methods\r\nexport const get = <T>(url: string, params?: any): Promise<T> => {\r\n  return request<T>({ method: 'GET', url, params });\r\n};\r\n\r\nexport const post = <T>(url: string, data?: any): Promise<T> => {\r\n  return request<T>({ method: 'POST', url, data });\r\n};\r\n\r\nexport const put = <T>(url: string, data?: any): Promise<T> => {\r\n  return request<T>({ method: 'PUT', url, data });\r\n};\r\n\r\nexport const del = <T>(url: string): Promise<T> => {\r\n  return request<T>({ method: 'DELETE', url });\r\n};\r\n\r\nexport default {\r\n  get,\r\n  post,\r\n  put,\r\n  delete: del\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAyD,OAAO;AAE5E,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV;EACA,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAT,SAAS,CAACK,YAAY,CAACO,QAAQ,CAACL,GAAG,CAChCK,QAAQ,IAAKA,QAAQ,EACrBH,KAAiB,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;EACrB;EACAC,OAAO,CAACR,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;;EAElC;EACA,IAAI,EAAAI,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBK,MAAM,MAAK,GAAG,EAAE;IAClC;IACAD,OAAO,CAACE,GAAG,CAAC,mDAAmD,CAAC;EAClE,CAAC,MAAM,IAAI,EAAAL,gBAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBI,MAAM,MAAK,GAAG,EAAE;IACzC;IACAD,OAAO,CAACE,GAAG,CAAC,oBAAoB,CAAC;EACnC;;EAEA;EACA,MAAMC,YAAY,GAAG,EAAAL,gBAAA,GAAAN,KAAK,CAACG,QAAQ,cAAAG,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBM,IAAI,cAAAL,qBAAA,uBAApBA,qBAAA,CAAsBP,KAAK,KAAIA,KAAK,CAACa,OAAO,IAAI,2BAA2B;;EAEhG;EACA,MAAMC,aAAa,GAAG,IAAIC,KAAK,CAACJ,YAAY,CAAC;EAC7C,OAAOV,OAAO,CAACC,MAAM,CAACY,aAAa,CAAC;AACtC,CACF,CAAC;;AAED;AACA,OAAO,MAAMjB,OAAO,GAAG,MAAUE,MAA0B,IAAiB;EAC1E,IAAI;IACF,MAAMI,QAA0B,GAAG,MAAMZ,SAAS,CAACQ,MAAM,CAAC;IAC1D,OAAOI,QAAQ,CAACS,IAAI;EACtB,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMgB,GAAG,GAAGA,CAAIC,GAAW,EAAEC,MAAY,KAAiB;EAC/D,OAAOrB,OAAO,CAAI;IAAEsB,MAAM,EAAE,KAAK;IAAEF,GAAG;IAAEC;EAAO,CAAC,CAAC;AACnD,CAAC;AAED,OAAO,MAAME,IAAI,GAAGA,CAAIH,GAAW,EAAEL,IAAU,KAAiB;EAC9D,OAAOf,OAAO,CAAI;IAAEsB,MAAM,EAAE,MAAM;IAAEF,GAAG;IAAEL;EAAK,CAAC,CAAC;AAClD,CAAC;AAED,OAAO,MAAMS,GAAG,GAAGA,CAAIJ,GAAW,EAAEL,IAAU,KAAiB;EAC7D,OAAOf,OAAO,CAAI;IAAEsB,MAAM,EAAE,KAAK;IAAEF,GAAG;IAAEL;EAAK,CAAC,CAAC;AACjD,CAAC;AAED,OAAO,MAAMU,GAAG,GAAOL,GAAW,IAAiB;EACjD,OAAOpB,OAAO,CAAI;IAAEsB,MAAM,EAAE,QAAQ;IAAEF;EAAI,CAAC,CAAC;AAC9C,CAAC;AAED,eAAe;EACbD,GAAG;EACHI,IAAI;EACJC,GAAG;EACHE,MAAM,EAAED;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}