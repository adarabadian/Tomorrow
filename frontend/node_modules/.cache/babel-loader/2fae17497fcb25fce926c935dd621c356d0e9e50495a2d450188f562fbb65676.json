{"ast":null,"code":"import axios from 'axios';\nimport { mapBackendAlert } from '../types/alert';\nconst API_BASE_URL = 'http://localhost:3001/api';\nexport const getAlerts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/alerts`);\n    return response.data.map(alert => mapBackendAlert(alert));\n  } catch (error) {\n    throw new Error('Failed to fetch alerts');\n  }\n};\nexport const createAlert = async alert => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/alerts`, alert);\n    return mapBackendAlert(response.data);\n  } catch (error) {\n    var _error$response, _error$response$data;\n    // Pass the specific error message from the backend if available\n    if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw error; // Rethrow the original error with details\n  }\n};\nexport const deleteAlert = async id => {\n  try {\n    await axios.delete(`${API_BASE_URL}/alerts/${id}`);\n  } catch (error) {\n    throw new Error('Failed to delete alert');\n  }\n};\nexport const updateAlert = async (id, alert) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/alerts/${id}`, alert);\n    return mapBackendAlert(response.data);\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    // Pass the specific error message from the backend if available\n    if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw error; // Rethrow the original error with details\n  }\n};","map":{"version":3,"names":["axios","mapBackendAlert","API_BASE_URL","getAlerts","response","get","data","map","alert","error","Error","createAlert","post","_error$response","_error$response$data","deleteAlert","id","delete","updateAlert","put","_error$response2","_error$response2$data"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/services/alertService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Alert, mapBackendAlert } from '../types/alert';\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\nexport const getAlerts = async (): Promise<Alert[]> => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/alerts`);\r\n    return response.data.map((alert: any) => mapBackendAlert(alert));\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch alerts');\r\n  }\r\n};\r\n\r\nexport const createAlert = async (alert: Omit<Alert, 'id' | '_id' | 'isTriggered' | 'lastChecked' | 'status'>): Promise<Alert> => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/alerts`, alert);\r\n    return mapBackendAlert(response.data);\r\n  } catch (error: any) {\r\n    // Pass the specific error message from the backend if available\r\n    if (error.response?.data?.error) {\r\n      throw new Error(error.response.data.error);\r\n    }\r\n    throw error; // Rethrow the original error with details\r\n  }\r\n};\r\n\r\nexport const deleteAlert = async (id: string): Promise<void> => {\r\n  try {\r\n    await axios.delete(`${API_BASE_URL}/alerts/${id}`);\r\n  } catch (error) {\r\n    throw new Error('Failed to delete alert');\r\n  }\r\n};\r\n\r\nexport const updateAlert = async (id: string, alert: Partial<Alert>): Promise<Alert> => {\r\n  try {\r\n    const response = await axios.put(`${API_BASE_URL}/alerts/${id}`, alert);\r\n    return mapBackendAlert(response.data);\r\n  } catch (error: any) {\r\n    // Pass the specific error message from the backend if available\r\n    if (error.response?.data?.error) {\r\n      throw new Error(error.response.data.error);\r\n    }\r\n    throw error; // Rethrow the original error with details\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAgBC,eAAe,QAAQ,gBAAgB;AAEvD,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAA8B;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGH,YAAY,SAAS,CAAC;IAC1D,OAAOE,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAEC,KAAU,IAAKP,eAAe,CAACO,KAAK,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAOH,KAA2E,IAAqB;EAChI,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMJ,KAAK,CAACY,IAAI,CAAC,GAAGV,YAAY,SAAS,EAAEM,KAAK,CAAC;IAClE,OAAOP,eAAe,CAACG,QAAQ,CAACE,IAAI,CAAC;EACvC,CAAC,CAAC,OAAOG,KAAU,EAAE;IAAA,IAAAI,eAAA,EAAAC,oBAAA;IACnB;IACA,KAAAD,eAAA,GAAIJ,KAAK,CAACL,QAAQ,cAAAS,eAAA,gBAAAC,oBAAA,GAAdD,eAAA,CAAgBP,IAAI,cAAAQ,oBAAA,eAApBA,oBAAA,CAAsBL,KAAK,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACL,QAAQ,CAACE,IAAI,CAACG,KAAK,CAAC;IAC5C;IACA,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAED,OAAO,MAAMM,WAAW,GAAG,MAAOC,EAAU,IAAoB;EAC9D,IAAI;IACF,MAAMhB,KAAK,CAACiB,MAAM,CAAC,GAAGf,YAAY,WAAWc,EAAE,EAAE,CAAC;EACpD,CAAC,CAAC,OAAOP,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC;AAED,OAAO,MAAMQ,WAAW,GAAG,MAAAA,CAAOF,EAAU,EAAER,KAAqB,KAAqB;EACtF,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMJ,KAAK,CAACmB,GAAG,CAAC,GAAGjB,YAAY,WAAWc,EAAE,EAAE,EAAER,KAAK,CAAC;IACvE,OAAOP,eAAe,CAACG,QAAQ,CAACE,IAAI,CAAC;EACvC,CAAC,CAAC,OAAOG,KAAU,EAAE;IAAA,IAAAW,gBAAA,EAAAC,qBAAA;IACnB;IACA,KAAAD,gBAAA,GAAIX,KAAK,CAACL,QAAQ,cAAAgB,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgBd,IAAI,cAAAe,qBAAA,eAApBA,qBAAA,CAAsBZ,KAAK,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACL,QAAQ,CAACE,IAAI,CAACG,KAAK,CAAC;IAC5C;IACA,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}