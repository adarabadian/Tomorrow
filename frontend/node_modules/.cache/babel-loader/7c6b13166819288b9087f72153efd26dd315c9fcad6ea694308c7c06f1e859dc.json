{"ast":null,"code":"import axios from 'axios';\nimport { mapBackendAlert } from '../types/alert';\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// Type for creating a new alert\n\n/**\r\n * Get all alerts from the API\r\n * @returns List of alerts\r\n */\nexport const getAlerts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/alerts`);\n    return response.data.map(alert => mapBackendAlert(alert));\n  } catch (error) {\n    throw new Error('Failed to fetch alerts');\n  }\n};\n\n/**\r\n * Evaluate a specific alert to get its current value\r\n * @param id Alert ID to evaluate\r\n * @returns The evaluated alert with current value\r\n */\nexport const evaluateAlert = async id => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/alerts/${id}/evaluate`);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to evaluate alert');\n  }\n};\n\n/**\r\n * Create a new alert\r\n * @param alert Alert data to create\r\n * @returns The created alert\r\n */\nexport const createAlert = async alert => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/alerts`, alert);\n    return mapBackendAlert(response.data);\n  } catch (error) {\n    var _error$response, _error$response$data;\n    // Pass the specific error message from the backend if available\n    if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw error; // Rethrow the original error with details\n  }\n};\n\n/**\r\n * Delete an alert by ID\r\n * @param id Alert ID to delete\r\n */\nexport const deleteAlert = async id => {\n  try {\n    await axios.delete(`${API_BASE_URL}/alerts/${id}`);\n  } catch (error) {\n    throw new Error('Failed to delete alert');\n  }\n};\n\n/**\r\n * Update an existing alert\r\n * @param id Alert ID to update\r\n * @param alert Partial alert data to update\r\n * @returns The updated alert\r\n */\nexport const updateAlert = async (id, alert) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/alerts/${id}`, alert);\n    return mapBackendAlert(response.data);\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    // Pass the specific error message from the backend if available\n    if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw error; // Rethrow the original error with details\n  }\n};","map":{"version":3,"names":["axios","mapBackendAlert","API_BASE_URL","getAlerts","response","get","data","map","alert","error","Error","evaluateAlert","id","createAlert","post","_error$response","_error$response$data","deleteAlert","delete","updateAlert","put","_error$response2","_error$response2$data"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/services/alertService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Alert, mapBackendAlert } from '../types/alert';\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\n// Type for creating a new alert\r\nexport type CreateAlertPayload = Omit<Alert, 'id' | '_id' | 'isTriggered' | 'lastChecked' | 'status'>;\r\n\r\n/**\r\n * Get all alerts from the API\r\n * @returns List of alerts\r\n */\r\nexport const getAlerts = async (): Promise<Alert[]> => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/alerts`);\r\n    return response.data.map((alert: any) => mapBackendAlert(alert));\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch alerts');\r\n  }\r\n};\r\n\r\n/**\r\n * Evaluate a specific alert to get its current value\r\n * @param id Alert ID to evaluate\r\n * @returns The evaluated alert with current value\r\n */\r\nexport const evaluateAlert = async (id: string): Promise<{\r\n  id: string;\r\n  name: string;\r\n  isTriggered: boolean;\r\n  lastValue?: number;\r\n}> => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/alerts/${id}/evaluate`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to evaluate alert');\r\n  }\r\n};\r\n\r\n/**\r\n * Create a new alert\r\n * @param alert Alert data to create\r\n * @returns The created alert\r\n */\r\nexport const createAlert = async (alert: CreateAlertPayload): Promise<Alert> => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/alerts`, alert);\r\n    return mapBackendAlert(response.data);\r\n  } catch (error: any) {\r\n    // Pass the specific error message from the backend if available\r\n    if (error.response?.data?.error) {\r\n      throw new Error(error.response.data.error);\r\n    }\r\n    throw error; // Rethrow the original error with details\r\n  }\r\n};\r\n\r\n/**\r\n * Delete an alert by ID\r\n * @param id Alert ID to delete\r\n */\r\nexport const deleteAlert = async (id: string): Promise<void> => {\r\n  try {\r\n    await axios.delete(`${API_BASE_URL}/alerts/${id}`);\r\n  } catch (error) {\r\n    throw new Error('Failed to delete alert');\r\n  }\r\n};\r\n\r\n/**\r\n * Update an existing alert\r\n * @param id Alert ID to update\r\n * @param alert Partial alert data to update\r\n * @returns The updated alert\r\n */\r\nexport const updateAlert = async (id: string, alert: Partial<Alert>): Promise<Alert> => {\r\n  try {\r\n    const response = await axios.put(`${API_BASE_URL}/alerts/${id}`, alert);\r\n    return mapBackendAlert(response.data);\r\n  } catch (error: any) {\r\n    // Pass the specific error message from the backend if available\r\n    if (error.response?.data?.error) {\r\n      throw new Error(error.response.data.error);\r\n    }\r\n    throw error; // Rethrow the original error with details\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAgBC,eAAe,QAAQ,gBAAgB;AAEvD,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;;AAGA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAA8B;EACrD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGH,YAAY,SAAS,CAAC;IAC1D,OAAOE,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAEC,KAAU,IAAKP,eAAe,CAACO,KAAK,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,EAAU,IAKxC;EACJ,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGH,YAAY,WAAWU,EAAE,WAAW,CAAC;IACzE,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,WAAW,GAAG,MAAOL,KAAyB,IAAqB;EAC9E,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMJ,KAAK,CAACc,IAAI,CAAC,GAAGZ,YAAY,SAAS,EAAEM,KAAK,CAAC;IAClE,OAAOP,eAAe,CAACG,QAAQ,CAACE,IAAI,CAAC;EACvC,CAAC,CAAC,OAAOG,KAAU,EAAE;IAAA,IAAAM,eAAA,EAAAC,oBAAA;IACnB;IACA,KAAAD,eAAA,GAAIN,KAAK,CAACL,QAAQ,cAAAW,eAAA,gBAAAC,oBAAA,GAAdD,eAAA,CAAgBT,IAAI,cAAAU,oBAAA,eAApBA,oBAAA,CAAsBP,KAAK,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACL,QAAQ,CAACE,IAAI,CAACG,KAAK,CAAC;IAC5C;IACA,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMQ,WAAW,GAAG,MAAOL,EAAU,IAAoB;EAC9D,IAAI;IACF,MAAMZ,KAAK,CAACkB,MAAM,CAAC,GAAGhB,YAAY,WAAWU,EAAE,EAAE,CAAC;EACpD,CAAC,CAAC,OAAOH,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,WAAW,GAAG,MAAAA,CAAOP,EAAU,EAAEJ,KAAqB,KAAqB;EACtF,IAAI;IACF,MAAMJ,QAAQ,GAAG,MAAMJ,KAAK,CAACoB,GAAG,CAAC,GAAGlB,YAAY,WAAWU,EAAE,EAAE,EAAEJ,KAAK,CAAC;IACvE,OAAOP,eAAe,CAACG,QAAQ,CAACE,IAAI,CAAC;EACvC,CAAC,CAAC,OAAOG,KAAU,EAAE;IAAA,IAAAY,gBAAA,EAAAC,qBAAA;IACnB;IACA,KAAAD,gBAAA,GAAIZ,KAAK,CAACL,QAAQ,cAAAiB,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgBf,IAAI,cAAAgB,qBAAA,eAApBA,qBAAA,CAAsBb,KAAK,EAAE;MAC/B,MAAM,IAAIC,KAAK,CAACD,KAAK,CAACL,QAAQ,CAACE,IAAI,CAACG,KAAK,CAAC;IAC5C;IACA,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}