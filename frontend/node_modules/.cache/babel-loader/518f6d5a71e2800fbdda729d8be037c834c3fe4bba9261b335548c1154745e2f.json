{"ast":null,"code":"import { evaluateAlertCondition } from '../utils/alertUtils';\n// Helper function to map the backend Alert model to our frontend Alert model\nexport const mapBackendAlert = backendAlert => {\n  console.log('Mapping backend alert to frontend model:', backendAlert);\n\n  // Get backend values\n  const backendIsTriggered = backendAlert.isTriggered !== undefined ? backendAlert.isTriggered : false;\n  const backendLastValue = backendAlert.lastValue;\n\n  // Calculate if we should evaluate alert condition\n  const canEvaluate = backendLastValue !== undefined && backendAlert.parameter && backendAlert.condition && backendAlert.threshold !== undefined;\n\n  // Determine final isTriggered value\n  let isTriggered = backendIsTriggered;\n  if (canEvaluate) {\n    console.log(`Alert ${backendAlert.name}: Can evaluate based on lastValue`);\n    console.log(`- Parameter: ${backendAlert.parameter}`);\n    console.log(`- Condition: ${backendAlert.condition}`);\n    console.log(`- Threshold: ${backendAlert.threshold}`);\n    console.log(`- LastValue: ${backendLastValue}`);\n    try {\n      // Force recalculation based on current threshold and last value\n      isTriggered = evaluateAlertCondition(backendAlert.parameter, backendAlert.condition, backendAlert.threshold, backendLastValue);\n      console.log(`Alert ${backendAlert.name}: Calculated isTriggered = ${isTriggered}`);\n    } catch (err) {\n      console.error(`Error evaluating alert ${backendAlert.name}:`, err);\n      // Fall back to backend value\n      isTriggered = backendIsTriggered;\n    }\n  } else {\n    console.log(`Alert ${backendAlert.name}: Cannot evaluate - missing data, using backend isTriggered = ${backendIsTriggered}`);\n  }\n\n  // Status should be derived directly from isTriggered for consistency\n  const status = isTriggered ? 'active' : 'inactive';\n  console.log(`Alert ${backendAlert.name}: Final status = ${status}`);\n  return {\n    id: backendAlert.id || backendAlert._id,\n    _id: backendAlert._id || backendAlert.id,\n    name: backendAlert.name,\n    location: backendAlert.location,\n    resolvedLocation: backendAlert.resolvedLocation,\n    parameter: backendAlert.parameter,\n    threshold: backendAlert.threshold,\n    condition: backendAlert.condition,\n    description: backendAlert.description,\n    userEmail: backendAlert.userEmail || '',\n    status: status,\n    isTriggered: isTriggered,\n    lastChecked: backendAlert.lastChecked || new Date().toISOString(),\n    lastValue: backendLastValue\n  };\n};","map":{"version":3,"names":["evaluateAlertCondition","mapBackendAlert","backendAlert","console","log","backendIsTriggered","isTriggered","undefined","backendLastValue","lastValue","canEvaluate","parameter","condition","threshold","name","err","error","status","id","_id","location","resolvedLocation","description","userEmail","lastChecked","Date","toISOString"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/types/alert.ts"],"sourcesContent":["import { evaluateAlertCondition } from '../utils/alertUtils';\r\n\r\nexport interface Alert {\r\n  id: string;\r\n  _id: string; // MongoDB-style ID for compatibility\r\n  name: string;\r\n  location: {\r\n    city?: string;\r\n    coordinates?: {\r\n      lat: number;\r\n      lon: number;\r\n    };\r\n  };\r\n  resolvedLocation?: string;\r\n  parameter: string;\r\n  threshold: number;\r\n  condition: string;\r\n  userEmail: string;\r\n  description?: string;\r\n  status: 'active' | 'inactive';\r\n  isTriggered: boolean;\r\n  lastChecked: string;\r\n  lastValue?: number;\r\n}\r\n\r\nexport interface CreateAlertPayload {\r\n  name: string;\r\n  location: {\r\n    city?: string;\r\n    coordinates?: {\r\n      lat: number;\r\n      lon: number;\r\n    };\r\n  };\r\n  parameter: string;\r\n  threshold: number;\r\n  condition: string;\r\n  description?: string;\r\n  userEmail: string;\r\n}\r\n\r\nexport interface AlertSummary {\r\n  id: string;\r\n  name: string;\r\n  parameter: string;\r\n  isTriggered: boolean;\r\n}\r\n\r\n// Helper function to map the backend Alert model to our frontend Alert model\r\nexport const mapBackendAlert = (backendAlert: any): Alert => {\r\n  console.log('Mapping backend alert to frontend model:', backendAlert);\r\n  \r\n  // Get backend values\r\n  const backendIsTriggered = backendAlert.isTriggered !== undefined ? backendAlert.isTriggered : false;\r\n  const backendLastValue = backendAlert.lastValue;\r\n  \r\n  // Calculate if we should evaluate alert condition\r\n  const canEvaluate = (\r\n    backendLastValue !== undefined && \r\n    backendAlert.parameter && \r\n    backendAlert.condition && \r\n    backendAlert.threshold !== undefined\r\n  );\r\n  \r\n  // Determine final isTriggered value\r\n  let isTriggered = backendIsTriggered;\r\n  \r\n  if (canEvaluate) {\r\n    console.log(`Alert ${backendAlert.name}: Can evaluate based on lastValue`);\r\n    console.log(`- Parameter: ${backendAlert.parameter}`);\r\n    console.log(`- Condition: ${backendAlert.condition}`);\r\n    console.log(`- Threshold: ${backendAlert.threshold}`);\r\n    console.log(`- LastValue: ${backendLastValue}`);\r\n    \r\n    try {\r\n      // Force recalculation based on current threshold and last value\r\n      isTriggered = evaluateAlertCondition(\r\n        backendAlert.parameter,\r\n        backendAlert.condition,\r\n        backendAlert.threshold,\r\n        backendLastValue\r\n      );\r\n      console.log(`Alert ${backendAlert.name}: Calculated isTriggered = ${isTriggered}`);\r\n    } catch (err) {\r\n      console.error(`Error evaluating alert ${backendAlert.name}:`, err);\r\n      // Fall back to backend value\r\n      isTriggered = backendIsTriggered;\r\n    }\r\n  } else {\r\n    console.log(`Alert ${backendAlert.name}: Cannot evaluate - missing data, using backend isTriggered = ${backendIsTriggered}`);\r\n  }\r\n  \r\n  // Status should be derived directly from isTriggered for consistency\r\n  const status = isTriggered ? 'active' : 'inactive';\r\n  console.log(`Alert ${backendAlert.name}: Final status = ${status}`);\r\n  \r\n  return {\r\n    id: backendAlert.id || backendAlert._id,\r\n    _id: backendAlert._id || backendAlert.id,\r\n    name: backendAlert.name,\r\n    location: backendAlert.location,\r\n    resolvedLocation: backendAlert.resolvedLocation,\r\n    parameter: backendAlert.parameter,\r\n    threshold: backendAlert.threshold,\r\n    condition: backendAlert.condition,\r\n    description: backendAlert.description,\r\n    userEmail: backendAlert.userEmail || '',\r\n    status: status,\r\n    isTriggered: isTriggered,\r\n    lastChecked: backendAlert.lastChecked || new Date().toISOString(),\r\n    lastValue: backendLastValue\r\n  };\r\n}; "],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,qBAAqB;AAgD5D;AACA,OAAO,MAAMC,eAAe,GAAIC,YAAiB,IAAY;EAC3DC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEF,YAAY,CAAC;;EAErE;EACA,MAAMG,kBAAkB,GAAGH,YAAY,CAACI,WAAW,KAAKC,SAAS,GAAGL,YAAY,CAACI,WAAW,GAAG,KAAK;EACpG,MAAME,gBAAgB,GAAGN,YAAY,CAACO,SAAS;;EAE/C;EACA,MAAMC,WAAW,GACfF,gBAAgB,KAAKD,SAAS,IAC9BL,YAAY,CAACS,SAAS,IACtBT,YAAY,CAACU,SAAS,IACtBV,YAAY,CAACW,SAAS,KAAKN,SAC5B;;EAED;EACA,IAAID,WAAW,GAAGD,kBAAkB;EAEpC,IAAIK,WAAW,EAAE;IACfP,OAAO,CAACC,GAAG,CAAC,SAASF,YAAY,CAACY,IAAI,mCAAmC,CAAC;IAC1EX,OAAO,CAACC,GAAG,CAAC,gBAAgBF,YAAY,CAACS,SAAS,EAAE,CAAC;IACrDR,OAAO,CAACC,GAAG,CAAC,gBAAgBF,YAAY,CAACU,SAAS,EAAE,CAAC;IACrDT,OAAO,CAACC,GAAG,CAAC,gBAAgBF,YAAY,CAACW,SAAS,EAAE,CAAC;IACrDV,OAAO,CAACC,GAAG,CAAC,gBAAgBI,gBAAgB,EAAE,CAAC;IAE/C,IAAI;MACF;MACAF,WAAW,GAAGN,sBAAsB,CAClCE,YAAY,CAACS,SAAS,EACtBT,YAAY,CAACU,SAAS,EACtBV,YAAY,CAACW,SAAS,EACtBL,gBACF,CAAC;MACDL,OAAO,CAACC,GAAG,CAAC,SAASF,YAAY,CAACY,IAAI,8BAA8BR,WAAW,EAAE,CAAC;IACpF,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZZ,OAAO,CAACa,KAAK,CAAC,0BAA0Bd,YAAY,CAACY,IAAI,GAAG,EAAEC,GAAG,CAAC;MAClE;MACAT,WAAW,GAAGD,kBAAkB;IAClC;EACF,CAAC,MAAM;IACLF,OAAO,CAACC,GAAG,CAAC,SAASF,YAAY,CAACY,IAAI,iEAAiET,kBAAkB,EAAE,CAAC;EAC9H;;EAEA;EACA,MAAMY,MAAM,GAAGX,WAAW,GAAG,QAAQ,GAAG,UAAU;EAClDH,OAAO,CAACC,GAAG,CAAC,SAASF,YAAY,CAACY,IAAI,oBAAoBG,MAAM,EAAE,CAAC;EAEnE,OAAO;IACLC,EAAE,EAAEhB,YAAY,CAACgB,EAAE,IAAIhB,YAAY,CAACiB,GAAG;IACvCA,GAAG,EAAEjB,YAAY,CAACiB,GAAG,IAAIjB,YAAY,CAACgB,EAAE;IACxCJ,IAAI,EAAEZ,YAAY,CAACY,IAAI;IACvBM,QAAQ,EAAElB,YAAY,CAACkB,QAAQ;IAC/BC,gBAAgB,EAAEnB,YAAY,CAACmB,gBAAgB;IAC/CV,SAAS,EAAET,YAAY,CAACS,SAAS;IACjCE,SAAS,EAAEX,YAAY,CAACW,SAAS;IACjCD,SAAS,EAAEV,YAAY,CAACU,SAAS;IACjCU,WAAW,EAAEpB,YAAY,CAACoB,WAAW;IACrCC,SAAS,EAAErB,YAAY,CAACqB,SAAS,IAAI,EAAE;IACvCN,MAAM,EAAEA,MAAM;IACdX,WAAW,EAAEA,WAAW;IACxBkB,WAAW,EAAEtB,YAAY,CAACsB,WAAW,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACjEjB,SAAS,EAAED;EACb,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}