{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adara\\\\Desktop\\\\aaa\\\\Tomorrow\\\\frontend\\\\src\\\\pages\\\\Alerts.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { createAlert, deleteAlert, updateAlert } from '../services/alertService';\nimport { useAlerts } from '../contexts/AlertsContext';\n// Import our components\nimport AlertForm from '../components/AlertForm/AlertForm';\nimport AlertList from '../components/AlertList/AlertList';\nimport AlertEditForm from '../components/AlertEditForm/AlertEditForm';\nimport Notifications from '../components/Notifications/Notifications';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alerts = () => {\n  _s();\n  const {\n    alerts,\n    loading,\n    error,\n    refreshAlerts\n  } = useAlerts();\n\n  // State for UI feedback\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [alertToEdit, setAlertToEdit] = useState(null);\n\n  // Handle alert creation\n  const handleCreateAlert = async alertData => {\n    try {\n      const createdAlert = await createAlert(alertData);\n      setSuccessMessage(`Alert for ${createdAlert.resolvedLocation || alertData.location.city || 'your location'} created successfully!`);\n      refreshAlerts();\n      return Promise.resolve();\n    } catch (err) {\n      const errorMessage = err.message || 'Failed to create alert';\n      setErrorMessage(errorMessage);\n      return Promise.reject(err);\n    }\n  };\n\n  // Edit an alert - called from AlertList\n  const handleEditAlert = async id => {\n    const alertToEdit = alerts.find(alert => alert.id === id || alert._id === id);\n    if (alertToEdit) {\n      setAlertToEdit(alertToEdit);\n      setEditDialogOpen(true);\n    }\n    return Promise.resolve();\n  };\n\n  // Toggle alert active status by directly calling server to evaluate it\n  const handleToggleAlert = async id => {\n    try {\n      console.log(`Requesting server to evaluate alert ${id}`);\n\n      // Use the special API endpoint to evaluate the alert status\n      const response = await fetch(`http://localhost:3001/api/alerts/${id}/evaluate`, {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to evaluate alert');\n      }\n      const data = await response.json();\n      console.log('Alert evaluation result:', data);\n\n      // Update UI with server's evaluation result\n      await refreshAlerts();\n      setSuccessMessage(`Alert status updated: ${data.isTriggered ? 'Active' : 'Inactive'}`);\n    } catch (err) {\n      const errorMessage = err.message || 'Failed to toggle alert status';\n      console.error('Error toggling alert status:', errorMessage);\n      setErrorMessage(errorMessage);\n    }\n  };\n\n  // Handle alert update submission\n  const handleUpdateAlert = async (id, updatedData) => {\n    try {\n      console.log('Updating alert:', id);\n      console.log('With data:', updatedData);\n\n      // Update the alert on the server\n      const updatedAlert = await updateAlert(id, updatedData);\n      console.log('Server response:', updatedAlert);\n\n      // Explicitly refresh alerts to get the latest data with updated status\n      console.log('Refreshing alerts...');\n      await refreshAlerts();\n\n      // Show success message\n      setSuccessMessage('Alert updated successfully!');\n    } catch (err) {\n      const errorMessage = err.message || 'Failed to update alert';\n      console.error('Error updating alert:', errorMessage);\n      setErrorMessage(errorMessage);\n    }\n  };\n\n  // Delete an alert - returns a Promise for the AlertList component\n  const handleDeleteAlert = async id => {\n    try {\n      await deleteAlert(id);\n      setSuccessMessage('Alert deleted successfully!');\n      await refreshAlerts();\n      return Promise.resolve();\n    } catch (err) {\n      setErrorMessage('Failed to delete alert');\n      return Promise.reject(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Weather Alerts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertForm, {\n      onSubmit: handleCreateAlert,\n      onSuccess: () => {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertList, {\n      alerts: alerts,\n      loading: loading,\n      error: error,\n      onDelete: handleDeleteAlert,\n      onEdit: handleEditAlert,\n      onToggle: handleToggleAlert,\n      onRefresh: refreshAlerts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), alertToEdit && /*#__PURE__*/_jsxDEV(AlertEditForm, {\n      alert: alertToEdit,\n      open: editDialogOpen,\n      onClose: () => {\n        setEditDialogOpen(false);\n        setAlertToEdit(null);\n      },\n      onSubmit: handleUpdateAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Notifications, {\n      successMessage: successMessage,\n      errorMessage: errorMessage,\n      onClearSuccess: () => setSuccessMessage(null),\n      onClearError: () => setErrorMessage(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(Alerts, \"LIymoYTCjamnM+yy7WHBiQ8dwVs=\", false, function () {\n  return [useAlerts];\n});\n_c = Alerts;\nexport default Alerts;\nvar _c;\n$RefreshReg$(_c, \"Alerts\");","map":{"version":3,"names":["React","useState","Box","Typography","createAlert","deleteAlert","updateAlert","useAlerts","AlertForm","AlertList","AlertEditForm","Notifications","jsxDEV","_jsxDEV","Alerts","_s","alerts","loading","error","refreshAlerts","successMessage","setSuccessMessage","errorMessage","setErrorMessage","editDialogOpen","setEditDialogOpen","alertToEdit","setAlertToEdit","handleCreateAlert","alertData","createdAlert","resolvedLocation","location","city","Promise","resolve","err","message","reject","handleEditAlert","id","find","alert","_id","handleToggleAlert","console","log","response","fetch","method","ok","Error","data","json","isTriggered","handleUpdateAlert","updatedData","updatedAlert","handleDeleteAlert","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onSuccess","onDelete","onEdit","onToggle","onRefresh","open","onClose","onClearSuccess","onClearError","_c","$RefreshReg$"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/pages/Alerts.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { createAlert, deleteAlert, updateAlert } from '../services/alertService';\nimport { useAlerts } from '../contexts/AlertsContext';\nimport { Alert } from '../types/alert';\n\n// Import our components\nimport AlertForm from '../components/AlertForm/AlertForm';\nimport AlertList from '../components/AlertList/AlertList';\nimport AlertEditForm from '../components/AlertEditForm/AlertEditForm';\nimport Notifications from '../components/Notifications/Notifications';\n\nconst Alerts: React.FC = () => {\n  const { alerts, loading, error, refreshAlerts } = useAlerts();\n  \n  // State for UI feedback\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [alertToEdit, setAlertToEdit] = useState<Alert | null>(null);\n\n  // Handle alert creation\n  const handleCreateAlert = async (alertData: any) => {\n    try {\n      const createdAlert = await createAlert(alertData);\n      setSuccessMessage(`Alert for ${createdAlert.resolvedLocation || alertData.location.city || 'your location'} created successfully!`);\n      refreshAlerts();\n      return Promise.resolve();\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to create alert';\n      setErrorMessage(errorMessage);\n      return Promise.reject(err);\n    }\n  };\n\n  // Edit an alert - called from AlertList\n  const handleEditAlert = async (id: string): Promise<void> => {\n    const alertToEdit = alerts.find(alert => alert.id === id || alert._id === id);\n    if (alertToEdit) {\n      setAlertToEdit(alertToEdit);\n      setEditDialogOpen(true);\n    }\n    return Promise.resolve();\n  };\n\n  // Toggle alert active status by directly calling server to evaluate it\n  const handleToggleAlert = async (id: string): Promise<void> => {\n    try {\n      console.log(`Requesting server to evaluate alert ${id}`);\n      \n      // Use the special API endpoint to evaluate the alert status\n      const response = await fetch(`http://localhost:3001/api/alerts/${id}/evaluate`, {\n        method: 'POST'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to evaluate alert');\n      }\n      \n      const data = await response.json();\n      console.log('Alert evaluation result:', data);\n      \n      // Update UI with server's evaluation result\n      await refreshAlerts();\n      \n      setSuccessMessage(`Alert status updated: ${data.isTriggered ? 'Active' : 'Inactive'}`);\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to toggle alert status';\n      console.error('Error toggling alert status:', errorMessage);\n      setErrorMessage(errorMessage);\n    }\n  };\n\n  // Handle alert update submission\n  const handleUpdateAlert = async (id: string, updatedData: Partial<Alert>): Promise<void> => {\n    try {\n      console.log('Updating alert:', id);\n      console.log('With data:', updatedData);\n      \n      // Update the alert on the server\n      const updatedAlert = await updateAlert(id, updatedData);\n      console.log('Server response:', updatedAlert);\n      \n      // Explicitly refresh alerts to get the latest data with updated status\n      console.log('Refreshing alerts...');\n      await refreshAlerts();\n      \n      // Show success message\n      setSuccessMessage('Alert updated successfully!');\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to update alert';\n      console.error('Error updating alert:', errorMessage);\n      setErrorMessage(errorMessage);\n    }\n  };\n\n  // Delete an alert - returns a Promise for the AlertList component\n  const handleDeleteAlert = async (id: string): Promise<void> => {\n    try {\n      await deleteAlert(id);\n      setSuccessMessage('Alert deleted successfully!');\n      await refreshAlerts();\n      return Promise.resolve();\n    } catch (err) {\n      setErrorMessage('Failed to delete alert');\n      return Promise.reject(err);\n    }\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h4\" gutterBottom>\n        Weather Alerts\n      </Typography>\n      \n      {/* Alert Creation Form */}\n      <AlertForm \n        onSubmit={handleCreateAlert}\n        onSuccess={() => {}}\n      />\n      \n      {/* Alert List */}\n      <AlertList \n        alerts={alerts}\n        loading={loading}\n        error={error}\n        onDelete={handleDeleteAlert}\n        onEdit={handleEditAlert}\n        onToggle={handleToggleAlert}\n        onRefresh={refreshAlerts}\n      />\n      \n      {/* Edit Dialog */}\n      {alertToEdit && (\n        <AlertEditForm\n          alert={alertToEdit}\n          open={editDialogOpen}\n          onClose={() => {\n            setEditDialogOpen(false);\n            setAlertToEdit(null);\n          }}\n          onSubmit={handleUpdateAlert}\n        />\n      )}\n      \n      {/* Notifications */}\n      <Notifications \n        successMessage={successMessage}\n        errorMessage={errorMessage}\n        onClearSuccess={() => setSuccessMessage(null)}\n        onClearError={() => setErrorMessage(null)}\n      />\n    </Box>\n  );\n};\n\nexport default Alerts; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}