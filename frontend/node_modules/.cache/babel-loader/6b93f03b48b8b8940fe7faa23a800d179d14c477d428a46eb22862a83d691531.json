{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adara\\\\Desktop\\\\aaa\\\\Tomorrow\\\\frontend\\\\src\\\\contexts\\\\AlertsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { getAlerts } from '../services/alertService';\nimport { Snackbar, Alert as MuiAlert } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlertsContext = /*#__PURE__*/createContext(undefined);\nexport const AlertsProvider = ({\n  children\n}) => {\n  _s();\n  const [alerts, setAlerts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [notification, setNotification] = useState(null);\n  const previousAlertsRef = useRef([]);\n\n  // Check for newly triggered alerts and show notification\n  const checkForNewlyTriggeredAlerts = useCallback(newAlerts => {\n    if (previousAlertsRef.current.length === 0) return;\n    const newlyTriggered = getNewlyTriggeredAlerts(previousAlertsRef.current, newAlerts);\n    if (newlyTriggered.length > 0) handleNewlyTriggeredAlerts(newlyTriggered);\n  }, []);\n  const getNewlyTriggeredAlerts = (previousAlerts, newAlerts) => {\n    return newAlerts.filter(newAlert => newAlert.isTriggered && !previousAlertsRef.current.some(oldAlert => oldAlert.id === newAlert.id && oldAlert.isTriggered));\n  };\n  const handleNewlyTriggeredAlerts = newlyTriggered => {\n    const triggerAlert = newlyTriggered[0];\n    setNotification({\n      message: `Alert: \"${triggerAlert.name}\" has been triggered!`,\n      id: triggerAlert.id\n    });\n  };\n  // Update state with new alerts data\n  const updateAlertsState = useCallback(data => {\n    previousAlertsRef.current = data;\n    setAlerts(data);\n    setLastUpdated(new Date());\n  }, []);\n\n  // Handle fetch errors\n  const handleFetchError = useCallback(err => {\n    console.error('Failed to load alerts:', err);\n    setError('Failed to load alerts');\n  }, []);\n\n  // Process alerts data from server\n  const processAlertsData = useCallback(data => {\n    if (data && Array.isArray(data)) {\n      checkForNewlyTriggeredAlerts(data);\n      updateAlertsState(data);\n    } else {\n      console.error('Invalid alert data received:', data);\n      setError('Failed to process alert data');\n    }\n  }, [checkForNewlyTriggeredAlerts, updateAlertsState]);\n\n  // Main refresh function\n  const refreshAlerts = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('Refreshing alerts from server...');\n      const data = await getAlerts();\n      console.log('Got alerts from server:', data);\n      processAlertsData(data);\n    } catch (err) {\n      handleFetchError(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [processAlertsData, handleFetchError]);\n\n  // Initial load\n  useEffect(() => {\n    refreshAlerts();\n  }, [refreshAlerts]);\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(refreshAlerts, 30000);\n    return () => clearInterval(interval);\n  }, [refreshAlerts]);\n\n  // Clear notification after 6 seconds\n  const handleCloseNotification = () => {\n    setNotification(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AlertsContext.Provider, {\n    value: {\n      alerts,\n      loading,\n      error,\n      refreshAlerts,\n      lastUpdated\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!notification,\n      autoHideDuration: 6000,\n      onClose: handleCloseNotification,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      children: /*#__PURE__*/_jsxDEV(MuiAlert, {\n        onClose: handleCloseNotification,\n        severity: \"warning\",\n        variant: \"filled\",\n        sx: {\n          width: '100%'\n        },\n        children: (notification === null || notification === void 0 ? void 0 : notification.message) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(AlertsProvider, \"VUUG8+8XBTnmp9GzBUJtc2YQOVY=\");\n_c = AlertsProvider;\nexport const useAlerts = () => {\n  _s2();\n  const context = useContext(AlertsContext);\n  if (context === undefined) throw new Error('useAlerts must be used within an AlertsProvider');\n  return context;\n};\n_s2(useAlerts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AlertsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","getAlerts","Snackbar","Alert","MuiAlert","jsxDEV","_jsxDEV","AlertsContext","undefined","AlertsProvider","children","_s","alerts","setAlerts","loading","setLoading","error","setError","lastUpdated","setLastUpdated","notification","setNotification","previousAlertsRef","checkForNewlyTriggeredAlerts","newAlerts","current","length","newlyTriggered","getNewlyTriggeredAlerts","handleNewlyTriggeredAlerts","previousAlerts","filter","newAlert","isTriggered","some","oldAlert","id","triggerAlert","message","name","updateAlertsState","data","Date","handleFetchError","err","console","processAlertsData","Array","isArray","refreshAlerts","log","interval","setInterval","clearInterval","handleCloseNotification","Provider","value","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","variant","sx","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAlerts","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/contexts/AlertsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\r\nimport { Alert } from '../types/alert';\r\nimport { getAlerts } from '../services/alertService';\r\nimport { Snackbar, Alert as MuiAlert } from '@mui/material';\r\n\r\ninterface AlertsContextType {\r\n  alerts: Alert[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refreshAlerts: () => Promise<void>;\r\n  lastUpdated: Date | null;\r\n}\r\n\r\nconst AlertsContext = createContext<AlertsContextType | undefined>(undefined);\r\n\r\nexport const AlertsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [alerts, setAlerts] = useState<Alert[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n  const [notification, setNotification] = useState<{ message: string, id: string } | null>(null);\r\n  const previousAlertsRef = useRef<Alert[]>([]);\r\n\r\n  // Check for newly triggered alerts and show notification\r\n  const checkForNewlyTriggeredAlerts = useCallback((newAlerts: Alert[]) => {\r\n    if (previousAlertsRef.current.length === 0) return;\r\n    const newlyTriggered = getNewlyTriggeredAlerts(previousAlertsRef.current, newAlerts);\r\n    if (newlyTriggered.length > 0) handleNewlyTriggeredAlerts(newlyTriggered);\r\n  }, []);\r\n\r\n  const getNewlyTriggeredAlerts = (previousAlerts: Alert[], newAlerts: Alert[]): Alert[] => {\r\n    return newAlerts.filter(newAlert => \r\n      newAlert.isTriggered && \r\n      !previousAlertsRef.current.some(oldAlert => \r\n        oldAlert.id === newAlert.id && oldAlert.isTriggered\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleNewlyTriggeredAlerts = (newlyTriggered: Alert[]) => {\r\n    const triggerAlert = newlyTriggered[0];\r\n    setNotification({\r\n      message: `Alert: \"${triggerAlert.name}\" has been triggered!`,\r\n      id: triggerAlert.id\r\n    });\r\n  };\r\n  // Update state with new alerts data\r\n  const updateAlertsState = useCallback((data: Alert[]) => {\r\n    previousAlertsRef.current = data;\r\n    setAlerts(data);\r\n    setLastUpdated(new Date());\r\n  }, []);\r\n\r\n  // Handle fetch errors\r\n  const handleFetchError = useCallback((err: unknown) => {\r\n    console.error('Failed to load alerts:', err);\r\n    setError('Failed to load alerts');\r\n  }, []);\r\n\r\n  // Process alerts data from server\r\n  const processAlertsData = useCallback((data: unknown) => {\r\n    if (data && Array.isArray(data)) {\r\n      checkForNewlyTriggeredAlerts(data);\r\n      updateAlertsState(data);\r\n    } else {\r\n      console.error('Invalid alert data received:', data);\r\n      setError('Failed to process alert data');\r\n    }\r\n  }, [checkForNewlyTriggeredAlerts, updateAlertsState]);\r\n\r\n  // Main refresh function\r\n  const refreshAlerts = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log('Refreshing alerts from server...');\r\n      const data = await getAlerts();\r\n      console.log('Got alerts from server:', data);\r\n      \r\n      processAlertsData(data);\r\n    } catch (err) {\r\n      handleFetchError(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [processAlertsData, handleFetchError]);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    refreshAlerts();\r\n  }, [refreshAlerts]);\r\n\r\n  // Auto-refresh every 30 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(refreshAlerts, 30000);\r\n    return () => clearInterval(interval);\r\n  }, [refreshAlerts]);\r\n\r\n  // Clear notification after 6 seconds\r\n  const handleCloseNotification = () => {\r\n    setNotification(null);\r\n  };\r\n\r\n  return (\r\n    <AlertsContext.Provider value={{ alerts, loading, error, refreshAlerts, lastUpdated }}>\r\n      {children}\r\n      \r\n      {/* Alert notification */}\r\n      <Snackbar\r\n        open={!!notification}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseNotification}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      >\r\n        <MuiAlert\r\n          onClose={handleCloseNotification}\r\n          severity=\"warning\"\r\n          variant=\"filled\"\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {notification?.message || ''}\r\n        </MuiAlert>\r\n      </Snackbar>\r\n    </AlertsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAlerts = () => {\r\n  const context = useContext(AlertsContext);\r\n  if (context === undefined) throw new Error('useAlerts must be used within an AlertsProvider');\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}