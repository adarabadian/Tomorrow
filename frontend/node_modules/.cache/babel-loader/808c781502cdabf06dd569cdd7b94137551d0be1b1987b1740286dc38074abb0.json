{"ast":null,"code":"import axios from 'axios';\nimport { mapBackendAlert } from '../types/alert';\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// Type for creating a new alert\n\n/**\r\n * Enhance error message with additional context if it's a rate limit error\r\n */\nconst enhanceErrorMessage = error => {\n  var _error$response, _error$response$data;\n  // Extract the error message\n  let message = 'An unknown error occurred';\n  if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error) {\n    message = error.response.data.error;\n  } else if (error.message) {\n    message = error.message;\n  }\n\n  // Check if this is a rate limit error\n  if (message.includes('API rate limit exceeded')) {\n    var _error$response2, _error$response2$head;\n    // Check if Retry-After header is present\n    const retryAfter = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$head = _error$response2.headers) === null || _error$response2$head === void 0 ? void 0 : _error$response2$head['retry-after'];\n    if (retryAfter) {\n      return `${message}. You can try again in ${retryAfter} seconds.`;\n    }\n\n    // If no specific retry time is provided\n    return `${message}. The weather service is currently experiencing high demand. Please try again in a few minutes.`;\n  }\n  return message;\n};\n\n/**\r\n * Get all alerts from the API\r\n * @returns List of alerts\r\n */\nexport const getAlerts = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/alerts`);\n    return response.data.map(alert => mapBackendAlert(alert));\n  } catch (error) {\n    throw new Error('Failed to fetch alerts');\n  }\n};\n\n/**\r\n * Create a new alert\r\n * @param alert Alert data to create\r\n * @returns The created alert\r\n */\nexport const createAlert = async alert => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/alerts`, alert);\n    return mapBackendAlert(response.data);\n  } catch (error) {\n    // Enhance the error message\n    throw new Error(enhanceErrorMessage(error));\n  }\n};\n\n/**\r\n * Delete an alert by ID\r\n * @param id Alert ID to delete\r\n */\nexport const deleteAlert = async id => {\n  try {\n    await axios.delete(`${API_BASE_URL}/alerts/${id}`);\n  } catch (error) {\n    throw new Error('Failed to delete alert');\n  }\n};\n\n/**\r\n * Update an existing alert\r\n * @param id Alert ID to update\r\n * @param alert Partial alert data to update\r\n * @returns The updated alert\r\n */\nexport const updateAlert = async (id, alert) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/alerts/${id}`, alert);\n    return mapBackendAlert(response.data);\n  } catch (error) {\n    // Enhance the error message\n    throw new Error(enhanceErrorMessage(error));\n  }\n};","map":{"version":3,"names":["axios","mapBackendAlert","API_BASE_URL","enhanceErrorMessage","error","_error$response","_error$response$data","message","response","data","includes","_error$response2","_error$response2$head","retryAfter","headers","getAlerts","get","map","alert","Error","createAlert","post","deleteAlert","id","delete","updateAlert","put"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/services/alertService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Alert, mapBackendAlert } from '../types/alert';\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\n// Type for creating a new alert\r\nexport type CreateAlertPayload = Omit<Alert, 'id' | '_id' | 'isTriggered' | 'lastChecked' | 'status'>;\r\n\r\n/**\r\n * Enhance error message with additional context if it's a rate limit error\r\n */\r\nconst enhanceErrorMessage = (error: any): string => {\r\n  // Extract the error message\r\n  let message = 'An unknown error occurred';\r\n  \r\n  if (error.response?.data?.error) {\r\n    message = error.response.data.error;\r\n  } else if (error.message) {\r\n    message = error.message;\r\n  }\r\n  \r\n  // Check if this is a rate limit error\r\n  if (message.includes('API rate limit exceeded')) {\r\n    // Check if Retry-After header is present\r\n    const retryAfter = error.response?.headers?.['retry-after'];\r\n    if (retryAfter) {\r\n      return `${message}. You can try again in ${retryAfter} seconds.`;\r\n    }\r\n    \r\n    // If no specific retry time is provided\r\n    return `${message}. The weather service is currently experiencing high demand. Please try again in a few minutes.`;\r\n  }\r\n  \r\n  return message;\r\n};\r\n\r\n/**\r\n * Get all alerts from the API\r\n * @returns List of alerts\r\n */\r\nexport const getAlerts = async (): Promise<Alert[]> => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/alerts`);\r\n    return response.data.map((alert: any) => mapBackendAlert(alert));\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch alerts');\r\n  }\r\n};\r\n\r\n/**\r\n * Create a new alert\r\n * @param alert Alert data to create\r\n * @returns The created alert\r\n */\r\nexport const createAlert = async (alert: CreateAlertPayload): Promise<Alert> => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/alerts`, alert);\r\n    return mapBackendAlert(response.data);\r\n  } catch (error: any) {\r\n    // Enhance the error message\r\n    throw new Error(enhanceErrorMessage(error));\r\n  }\r\n};\r\n\r\n/**\r\n * Delete an alert by ID\r\n * @param id Alert ID to delete\r\n */\r\nexport const deleteAlert = async (id: string): Promise<void> => {\r\n  try {\r\n    await axios.delete(`${API_BASE_URL}/alerts/${id}`);\r\n  } catch (error) {\r\n    throw new Error('Failed to delete alert');\r\n  }\r\n};\r\n\r\n/**\r\n * Update an existing alert\r\n * @param id Alert ID to update\r\n * @param alert Partial alert data to update\r\n * @returns The updated alert\r\n */\r\nexport const updateAlert = async (id: string, alert: Partial<Alert>): Promise<Alert> => {\r\n  try {\r\n    const response = await axios.put(`${API_BASE_URL}/alerts/${id}`, alert);\r\n    return mapBackendAlert(response.data);\r\n  } catch (error: any) {\r\n    // Enhance the error message\r\n    throw new Error(enhanceErrorMessage(error));\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAgBC,eAAe,QAAQ,gBAAgB;AAEvD,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;;AAGA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAIC,KAAU,IAAa;EAAA,IAAAC,eAAA,EAAAC,oBAAA;EAClD;EACA,IAAIC,OAAO,GAAG,2BAA2B;EAEzC,KAAAF,eAAA,GAAID,KAAK,CAACI,QAAQ,cAAAH,eAAA,gBAAAC,oBAAA,GAAdD,eAAA,CAAgBI,IAAI,cAAAH,oBAAA,eAApBA,oBAAA,CAAsBF,KAAK,EAAE;IAC/BG,OAAO,GAAGH,KAAK,CAACI,QAAQ,CAACC,IAAI,CAACL,KAAK;EACrC,CAAC,MAAM,IAAIA,KAAK,CAACG,OAAO,EAAE;IACxBA,OAAO,GAAGH,KAAK,CAACG,OAAO;EACzB;;EAEA;EACA,IAAIA,OAAO,CAACG,QAAQ,CAAC,yBAAyB,CAAC,EAAE;IAAA,IAAAC,gBAAA,EAAAC,qBAAA;IAC/C;IACA,MAAMC,UAAU,IAAAF,gBAAA,GAAGP,KAAK,CAACI,QAAQ,cAAAG,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBG,OAAO,cAAAF,qBAAA,uBAAvBA,qBAAA,CAA0B,aAAa,CAAC;IAC3D,IAAIC,UAAU,EAAE;MACd,OAAO,GAAGN,OAAO,0BAA0BM,UAAU,WAAW;IAClE;;IAEA;IACA,OAAO,GAAGN,OAAO,iGAAiG;EACpH;EAEA,OAAOA,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAA8B;EACrD,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMR,KAAK,CAACgB,GAAG,CAAC,GAAGd,YAAY,SAAS,CAAC;IAC1D,OAAOM,QAAQ,CAACC,IAAI,CAACQ,GAAG,CAAEC,KAAU,IAAKjB,eAAe,CAACiB,KAAK,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOd,KAAK,EAAE;IACd,MAAM,IAAIe,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOF,KAAyB,IAAqB;EAC9E,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMR,KAAK,CAACqB,IAAI,CAAC,GAAGnB,YAAY,SAAS,EAAEgB,KAAK,CAAC;IAClE,OAAOjB,eAAe,CAACO,QAAQ,CAACC,IAAI,CAAC;EACvC,CAAC,CAAC,OAAOL,KAAU,EAAE;IACnB;IACA,MAAM,IAAIe,KAAK,CAAChB,mBAAmB,CAACC,KAAK,CAAC,CAAC;EAC7C;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMkB,WAAW,GAAG,MAAOC,EAAU,IAAoB;EAC9D,IAAI;IACF,MAAMvB,KAAK,CAACwB,MAAM,CAAC,GAAGtB,YAAY,WAAWqB,EAAE,EAAE,CAAC;EACpD,CAAC,CAAC,OAAOnB,KAAK,EAAE;IACd,MAAM,IAAIe,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,WAAW,GAAG,MAAAA,CAAOF,EAAU,EAAEL,KAAqB,KAAqB;EACtF,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMR,KAAK,CAAC0B,GAAG,CAAC,GAAGxB,YAAY,WAAWqB,EAAE,EAAE,EAAEL,KAAK,CAAC;IACvE,OAAOjB,eAAe,CAACO,QAAQ,CAACC,IAAI,CAAC;EACvC,CAAC,CAAC,OAAOL,KAAU,EAAE;IACnB;IACA,MAAM,IAAIe,KAAK,CAAChB,mBAAmB,CAACC,KAAK,CAAC,CAAC;EAC7C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}