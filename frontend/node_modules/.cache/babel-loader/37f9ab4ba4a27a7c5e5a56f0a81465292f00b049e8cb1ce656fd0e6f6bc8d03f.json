{"ast":null,"code":"import React from 'react';\nimport ThermometerIcon from '@mui/icons-material/Thermostat';\nimport AirIcon from '@mui/icons-material/Air';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\n\n// Parameters and conditions for alert creation\nexport const PARAMETERS = [{\n  value: 'temperature',\n  label: 'Temperature',\n  icon: /*#__PURE__*/React.createElement(ThermometerIcon),\n  unit: '째C'\n}, {\n  value: 'windSpeed',\n  label: 'Wind Speed',\n  icon: /*#__PURE__*/React.createElement(AirIcon),\n  unit: 'm/s'\n}, {\n  value: 'precipitation',\n  label: 'Precipitation',\n  icon: /*#__PURE__*/React.createElement(WaterDropIcon),\n  unit: 'mm'\n}, {\n  value: 'humidity',\n  label: 'Humidity',\n  icon: /*#__PURE__*/React.createElement(WaterDropIcon),\n  unit: '%'\n}];\nexport const CONDITIONS = [{\n  value: '>',\n  label: 'Greater than (>)'\n}, {\n  value: '<',\n  label: 'Less than (<)'\n}, {\n  value: '>=',\n  label: 'Greater than or equal to (>=)'\n}, {\n  value: '<=',\n  label: 'Less than or equal to (<=)'\n}, {\n  value: '==',\n  label: 'Equal to (==)'\n}];\nexport const DEFAULT_ALERT = {\n  name: '',\n  type: '',\n  location: {\n    city: ''\n  },\n  parameter: 'temperature',\n  condition: '>',\n  threshold: 0,\n  description: '',\n  userEmail: ''\n};\n\n// Helper function to convert condition to readable text\nexport const getConditionText = condition => {\n  switch (condition) {\n    case 'gt':\n    case '>':\n      return 'greater than';\n    case 'lt':\n    case '<':\n      return 'less than';\n    case 'eq':\n    case '==':\n      return 'equal to';\n    case '>=':\n      return 'greater than or equal to';\n    case '<=':\n      return 'less than or equal to';\n    default:\n      return condition;\n  }\n};\n\n// Helper function to get the parameter name\nexport const getParameterName = parameter => {\n  switch (parameter) {\n    case 'temp':\n    case 'temperature':\n      return 'Temperature';\n    case 'humidity':\n      return 'Humidity';\n    case 'wind_speed':\n    case 'windSpeed':\n      return 'Wind Speed';\n    case 'precipitation':\n      return 'Precipitation';\n    default:\n      return parameter;\n  }\n};\n\n// Helper function to get the parameter icon\nexport const getParameterIcon = parameter => {\n  switch (parameter) {\n    case 'temperature':\n      return /*#__PURE__*/React.createElement(ThermometerIcon);\n    case 'windSpeed':\n      return /*#__PURE__*/React.createElement(AirIcon);\n    case 'precipitation':\n    case 'humidity':\n      return /*#__PURE__*/React.createElement(WaterDropIcon);\n    default:\n      return /*#__PURE__*/React.createElement(ThermometerIcon);\n  }\n};\n\n// Helper function to get parameter unit\nexport const getParameterUnit = parameter => {\n  switch (parameter) {\n    case 'temperature':\n    case 'temp':\n      return '째C';\n    case 'windSpeed':\n    case 'wind_speed':\n      return 'm/s';\n    case 'precipitation':\n      return 'mm';\n    case 'humidity':\n      return '%';\n    default:\n      return '';\n  }\n};\n\n// Format a condition for display\nexport const formatCondition = (parameter, condition, threshold) => {\n  return `${condition} ${threshold}${getParameterUnit(parameter)}`;\n};","map":{"version":3,"names":["React","ThermometerIcon","AirIcon","WaterDropIcon","PARAMETERS","value","label","icon","createElement","unit","CONDITIONS","DEFAULT_ALERT","name","type","location","city","parameter","condition","threshold","description","userEmail","getConditionText","getParameterName","getParameterIcon","getParameterUnit","formatCondition"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/utils/alertUtils.ts"],"sourcesContent":["import React from 'react';\r\nimport ThermometerIcon from '@mui/icons-material/Thermostat';\r\nimport AirIcon from '@mui/icons-material/Air';\r\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\r\n\r\n// Parameters and conditions for alert creation\r\nexport const PARAMETERS = [\r\n  { value: 'temperature', label: 'Temperature', icon: React.createElement(ThermometerIcon), unit: '째C' },\r\n  { value: 'windSpeed', label: 'Wind Speed', icon: React.createElement(AirIcon), unit: 'm/s' },\r\n  { value: 'precipitation', label: 'Precipitation', icon: React.createElement(WaterDropIcon), unit: 'mm' },\r\n  { value: 'humidity', label: 'Humidity', icon: React.createElement(WaterDropIcon), unit: '%' }\r\n];\r\n\r\nexport const CONDITIONS = [\r\n  { value: '>', label: 'Greater than (>)' },\r\n  { value: '<', label: 'Less than (<)' },\r\n  { value: '>=', label: 'Greater than or equal to (>=)' },\r\n  { value: '<=', label: 'Less than or equal to (<=)' },\r\n  { value: '==', label: 'Equal to (==)' }\r\n];\r\n\r\nexport const DEFAULT_ALERT = {\r\n  name: '',\r\n  type: '',\r\n  location: { city: '' },\r\n  parameter: 'temperature',\r\n  condition: '>',\r\n  threshold: 0,\r\n  description: '',\r\n  userEmail: ''\r\n};\r\n\r\n// Helper function to convert condition to readable text\r\nexport const getConditionText = (condition: string): string => {\r\n  switch (condition) {\r\n    case 'gt':\r\n    case '>':\r\n      return 'greater than';\r\n    case 'lt':\r\n    case '<':\r\n      return 'less than';\r\n    case 'eq':\r\n    case '==':\r\n      return 'equal to';\r\n    case '>=':\r\n      return 'greater than or equal to';\r\n    case '<=':\r\n      return 'less than or equal to';\r\n    default:\r\n      return condition;\r\n  }\r\n};\r\n\r\n// Helper function to get the parameter name\r\nexport const getParameterName = (parameter: string): string => {\r\n  switch (parameter) {\r\n    case 'temp':\r\n    case 'temperature':\r\n      return 'Temperature';\r\n    case 'humidity':\r\n      return 'Humidity';\r\n    case 'wind_speed':\r\n    case 'windSpeed':\r\n      return 'Wind Speed';\r\n    case 'precipitation':\r\n      return 'Precipitation';\r\n    default:\r\n      return parameter;\r\n  }\r\n};\r\n\r\n// Helper function to get the parameter icon\r\nexport const getParameterIcon = (parameter: string): React.ReactNode => {\r\n  switch (parameter) {\r\n    case 'temperature':\r\n      return React.createElement(ThermometerIcon);\r\n    case 'windSpeed':\r\n      return React.createElement(AirIcon);\r\n    case 'precipitation':\r\n    case 'humidity':\r\n      return React.createElement(WaterDropIcon);\r\n    default:\r\n      return React.createElement(ThermometerIcon);\r\n  }\r\n};\r\n\r\n// Helper function to get parameter unit\r\nexport const getParameterUnit = (parameter: string) => {\r\n  switch (parameter) {\r\n    case 'temperature':\r\n    case 'temp':\r\n      return '째C';\r\n    case 'windSpeed':\r\n    case 'wind_speed':\r\n      return 'm/s';\r\n    case 'precipitation':\r\n      return 'mm';\r\n    case 'humidity':\r\n      return '%';\r\n    default:\r\n      return '';\r\n  }\r\n};\r\n\r\n// Format a condition for display\r\nexport const formatCondition = (parameter: string, condition: string, threshold: number): string => {\r\n  return `${condition} ${threshold}${getParameterUnit(parameter)}`;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}