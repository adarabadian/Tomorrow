{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adara\\\\Desktop\\\\aaa\\\\Tomorrow\\\\frontend\\\\src\\\\components\\\\Weather\\\\WeatherHeader.tsx\";\nimport React from 'react';\nimport { Paper, Grid, Typography } from '@mui/material';\nimport { getWeatherIcon } from './WeatherIcons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherHeader = ({\n  weather\n}) => /*#__PURE__*/_jsxDEV(Paper, {\n  elevation: 3,\n  sx: {\n    p: 3,\n    mb: 4,\n    background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n    color: 'white'\n  },\n  children: /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 8,\n      sm: 10,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        sx: {\n          fontWeight: 'bold'\n        },\n        children: [\"Current Weather \", weather.location && `in ${weather.location}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: [\"Updated: \", new Date(weather.timestamp).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 4,\n      sm: 2,\n      sx: {\n        textAlign: 'center'\n      },\n      children: [getWeatherIcon(weather.temperature, weather.precipitation), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        sx: {\n          fontWeight: 'bold',\n          mt: 1\n        },\n        children: [weather.temperature, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n_c = WeatherHeader;\nexport default WeatherHeader;\nvar _c;\n$RefreshReg$(_c, \"WeatherHeader\");","map":{"version":3,"names":["React","Paper","Grid","Typography","getWeatherIcon","jsxDEV","_jsxDEV","WeatherHeader","weather","elevation","sx","p","mb","background","color","children","container","spacing","alignItems","item","xs","sm","variant","gutterBottom","fontWeight","location","fileName","_jsxFileName","lineNumber","columnNumber","Date","timestamp","toLocaleString","textAlign","temperature","precipitation","mt","_c","$RefreshReg$"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/components/Weather/WeatherHeader.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Paper, Grid, Typography } from '@mui/material';\r\nimport { WeatherData } from '../../types/weather';\r\nimport { getWeatherIcon } from './WeatherIcons';\r\n\r\ninterface WeatherHeaderProps {\r\n  weather: WeatherData;\r\n}\r\n\r\nconst WeatherHeader: React.FC<WeatherHeaderProps> = ({ weather }) => (\r\n  <Paper \r\n    elevation={3} \r\n    sx={{ \r\n      p: 3, \r\n      mb: 4,\r\n      background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\r\n      color: 'white'\r\n    }}\r\n  >\r\n    <Grid container spacing={2} alignItems=\"center\">\r\n      <Grid item xs={8} sm={10}>\r\n        <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 'bold' }}>\r\n          Current Weather {weather.location && `in ${weather.location}`}\r\n        </Typography>\r\n        <Typography variant=\"body1\">\r\n          Updated: {new Date(weather.timestamp).toLocaleString()}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={4} sm={2} sx={{ textAlign: 'center' }}>\r\n        {getWeatherIcon(weather.temperature, weather.precipitation)}\r\n        <Typography variant=\"h4\" sx={{ fontWeight: 'bold', mt: 1 }}>\r\n          {weather.temperature}Â°C\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  </Paper>\r\n);\r\n\r\nexport default WeatherHeader; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,IAAI,EAAEC,UAAU,QAAQ,eAAe;AAEvD,SAASC,cAAc,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMhD,MAAMC,aAA2C,GAAGA,CAAC;EAAEC;AAAQ,CAAC,kBAC9DF,OAAA,CAACL,KAAK;EACJQ,SAAS,EAAE,CAAE;EACbC,EAAE,EAAE;IACFC,CAAC,EAAE,CAAC;IACJC,EAAE,EAAE,CAAC;IACLC,UAAU,EAAE,kDAAkD;IAC9DC,KAAK,EAAE;EACT,CAAE;EAAAC,QAAA,eAEFT,OAAA,CAACJ,IAAI;IAACc,SAAS;IAACC,OAAO,EAAE,CAAE;IAACC,UAAU,EAAC,QAAQ;IAAAH,QAAA,gBAC7CT,OAAA,CAACJ,IAAI;MAACiB,IAAI;MAACC,EAAE,EAAE,CAAE;MAACC,EAAE,EAAE,EAAG;MAAAN,QAAA,gBACvBT,OAAA,CAACH,UAAU;QAACmB,OAAO,EAAC,IAAI;QAACC,YAAY;QAACb,EAAE,EAAE;UAAEc,UAAU,EAAE;QAAO,CAAE;QAAAT,QAAA,GAAC,kBAChD,EAACP,OAAO,CAACiB,QAAQ,IAAI,MAAMjB,OAAO,CAACiB,QAAQ,EAAE;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,eACbvB,OAAA,CAACH,UAAU;QAACmB,OAAO,EAAC,OAAO;QAAAP,QAAA,GAAC,WACjB,EAAC,IAAIe,IAAI,CAACtB,OAAO,CAACuB,SAAS,CAAC,CAACC,cAAc,CAAC,CAAC;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACPvB,OAAA,CAACJ,IAAI;MAACiB,IAAI;MAACC,EAAE,EAAE,CAAE;MAACC,EAAE,EAAE,CAAE;MAACX,EAAE,EAAE;QAAEuB,SAAS,EAAE;MAAS,CAAE;MAAAlB,QAAA,GAClDX,cAAc,CAACI,OAAO,CAAC0B,WAAW,EAAE1B,OAAO,CAAC2B,aAAa,CAAC,eAC3D7B,OAAA,CAACH,UAAU;QAACmB,OAAO,EAAC,IAAI;QAACZ,EAAE,EAAE;UAAEc,UAAU,EAAE,MAAM;UAAEY,EAAE,EAAE;QAAE,CAAE;QAAArB,QAAA,GACxDP,OAAO,CAAC0B,WAAW,EAAC,OACvB;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACF,CACR;AAACQ,EAAA,GA3BI9B,aAA2C;AA6BjD,eAAeA,aAAa;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}