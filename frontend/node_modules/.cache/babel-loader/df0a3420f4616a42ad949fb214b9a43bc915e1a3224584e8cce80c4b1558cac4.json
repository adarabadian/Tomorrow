{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n/**\r\n * Helper function for API requests\r\n */\nconst fetchAPI = async (endpoint, params) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}${endpoint}`, {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('API request failed:', error);\n    if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw error;\n  }\n};\n\n/**\r\n * Type for location parameters\r\n */\n\n/**\r\n * Fetch current weather data for a location\r\n */\nexport const fetchCurrentWeather = async location => {\n  try {\n    const params = 'lat' in location ? {\n      lat: location.lat,\n      lon: location.lon\n    } : {\n      city: location.city\n    };\n    return fetchAPI('/weather/current', params);\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw new Error('Failed to fetch weather data');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchAPI","endpoint","params","response","get","data","error","_error$response","_error$response$data","console","Error","fetchCurrentWeather","location","lat","lon","city"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/services/weatherService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { WeatherData } from '../types/weather';\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\n/**\r\n * Helper function for API requests\r\n */\r\nconst fetchAPI = async <T>(endpoint: string, params?: any): Promise<T> => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}${endpoint}`, { params });\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error('API request failed:', error);\r\n    if (error.response?.data?.error) {\r\n      throw new Error(error.response.data.error);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Type for location parameters\r\n */\r\nexport type LocationParam = { lat: number; lon: number } | { city: string };\r\n\r\n/**\r\n * Fetch current weather data for a location\r\n */\r\nexport const fetchCurrentWeather = async (location: LocationParam): Promise<WeatherData> => {\r\n  try {\r\n    const params = 'lat' in location\r\n      ? { lat: location.lat, lon: location.lon }\r\n      : { city: location.city };\r\n\r\n    return fetchAPI<WeatherData>('/weather/current', params);\r\n  } catch (error) {\r\n    console.error('Error fetching weather data:', error);\r\n    throw new Error('Failed to fetch weather data');\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,MAAAA,CAAUC,QAAgB,EAAEC,MAAY,KAAiB;EACxE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,YAAY,GAAGE,QAAQ,EAAE,EAAE;MAAEC;IAAO,CAAC,CAAC;IAC1E,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACnBC,OAAO,CAACH,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,KAAAC,eAAA,GAAID,KAAK,CAACH,QAAQ,cAAAI,eAAA,gBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,eAApBA,oBAAA,CAAsBF,KAAK,EAAE;MAC/B,MAAM,IAAII,KAAK,CAACJ,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;IAC5C;IACA,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;;AAGA;AACA;AACA;AACA,OAAO,MAAMK,mBAAmB,GAAG,MAAOC,QAAuB,IAA2B;EAC1F,IAAI;IACF,MAAMV,MAAM,GAAG,KAAK,IAAIU,QAAQ,GAC5B;MAAEC,GAAG,EAAED,QAAQ,CAACC,GAAG;MAAEC,GAAG,EAAEF,QAAQ,CAACE;IAAI,CAAC,GACxC;MAAEC,IAAI,EAAEH,QAAQ,CAACG;IAAK,CAAC;IAE3B,OAAOf,QAAQ,CAAc,kBAAkB,EAAEE,MAAM,CAAC;EAC1D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdG,OAAO,CAACH,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAM,IAAII,KAAK,CAAC,8BAA8B,CAAC;EACjD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}