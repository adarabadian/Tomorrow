{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { fetchCurrentWeather } from '../services/weatherService';\n\n// Cache configuration\nconst CACHE_KEY = 'cachedWeatherData';\nconst CACHE_EXPIRATION_MS = 5 * 60 * 1000; // 5 minutes\n\n// Check if cached data is still valid\nconst isCacheValid = cache => {\n  if (!cache) return false;\n  return Date.now() - cache.timestamp < CACHE_EXPIRATION_MS;\n};\nexport const useWeather = () => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [location, setLocation] = useState('');\n\n  // Initialize from cache if available\n  useEffect(() => {\n    const cachedData = localStorage.getItem(CACHE_KEY);\n    if (cachedData) {\n      try {\n        const cache = JSON.parse(cachedData);\n        if (isCacheValid(cache)) {\n          setWeather(cache.data);\n          setLocation(cache.location);\n        }\n      } catch (err) {\n        localStorage.removeItem(CACHE_KEY);\n      }\n    }\n  }, []);\n  const fetchWeather = useCallback(async locationParam => {\n    // Check if we're fetching the default location and we have valid cache\n    const isDefaultLocation = 'city' in locationParam && locationParam.city === 'New York City';\n    const cachedData = localStorage.getItem(CACHE_KEY);\n    if (isDefaultLocation && cachedData) {\n      try {\n        const cache = JSON.parse(cachedData);\n        if (isCacheValid(cache)) {\n          setWeather(cache.data);\n          setLocation(cache.location);\n          return; // Use cached data, don't make API call\n        }\n      } catch (err) {\n        // Invalid cache, continue with API call\n        localStorage.removeItem(CACHE_KEY);\n      }\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await fetchCurrentWeather(locationParam);\n      setWeather(data);\n      let locationString = '';\n      if ('city' in locationParam) {\n        locationString = locationParam.city;\n      } else {\n        locationString = `${locationParam.lat.toFixed(2)}, ${locationParam.lon.toFixed(2)}`;\n      }\n      setLocation(locationString);\n\n      // Cache the weather data for default location\n      if (isDefaultLocation) {\n        const cacheData = {\n          data,\n          timestamp: Date.now(),\n          location: locationString\n        };\n        localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));\n      }\n    } catch (err) {\n      setError('Failed to load weather data. Please check the location and try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const getCurrentLocation = useCallback(() => {\n    if (navigator.geolocation) {\n      setLoading(true);\n      navigator.geolocation.getCurrentPosition(position => {\n        fetchWeather({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n      }, error => {\n        setError('Unable to retrieve your location. Please enter it manually.');\n        setLoading(false);\n      });\n    } else {\n      setError('Geolocation is not supported by your browser. Please enter your location manually.');\n    }\n  }, [fetchWeather]);\n  return {\n    weather,\n    loading,\n    error,\n    location,\n    fetchWeather,\n    getCurrentLocation\n  };\n};\n_s(useWeather, \"Yf92fDH0JHXAcEnZmox/Tb4w/0U=\");","map":{"version":3,"names":["useState","useCallback","useEffect","fetchCurrentWeather","CACHE_KEY","CACHE_EXPIRATION_MS","isCacheValid","cache","Date","now","timestamp","useWeather","_s","weather","setWeather","loading","setLoading","error","setError","location","setLocation","cachedData","localStorage","getItem","JSON","parse","data","err","removeItem","fetchWeather","locationParam","isDefaultLocation","city","locationString","lat","toFixed","lon","cacheData","setItem","stringify","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/hooks/useWeather.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\r\nimport { WeatherData } from '../types/weather';\r\nimport { fetchCurrentWeather } from '../services/weatherService';\r\n\r\n// Cache configuration\r\nconst CACHE_KEY = 'cachedWeatherData';\r\nconst CACHE_EXPIRATION_MS = 5 * 60 * 1000; // 5 minutes\r\n\r\ninterface CachedWeatherData {\r\n  data: WeatherData;\r\n  timestamp: number;\r\n  location: string;\r\n}\r\n\r\n// Check if cached data is still valid\r\nconst isCacheValid = (cache: CachedWeatherData | null): boolean => {\r\n  if (!cache) return false;\r\n  return (Date.now() - cache.timestamp) < CACHE_EXPIRATION_MS;\r\n};\r\n\r\nexport const useWeather = () => {\r\n  const [weather, setWeather] = useState<WeatherData | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [location, setLocation] = useState<string>('');\r\n\r\n  // Initialize from cache if available\r\n  useEffect(() => {\r\n    const cachedData = localStorage.getItem(CACHE_KEY);\r\n    if (cachedData) {\r\n      try {\r\n        const cache = JSON.parse(cachedData) as CachedWeatherData;\r\n        if (isCacheValid(cache)) {\r\n          setWeather(cache.data);\r\n          setLocation(cache.location);\r\n        }\r\n      } catch (err) {\r\n        localStorage.removeItem(CACHE_KEY);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const fetchWeather = useCallback(async (locationParam: { city: string } | { lat: number; lon: number }) => {\r\n    // Check if we're fetching the default location and we have valid cache\r\n    const isDefaultLocation = 'city' in locationParam && locationParam.city === 'New York City';\r\n    const cachedData = localStorage.getItem(CACHE_KEY);\r\n    \r\n    if (isDefaultLocation && cachedData) {\r\n      try {\r\n        const cache = JSON.parse(cachedData) as CachedWeatherData;\r\n        if (isCacheValid(cache)) {\r\n          setWeather(cache.data);\r\n          setLocation(cache.location);\r\n          return; // Use cached data, don't make API call\r\n        }\r\n      } catch (err) {\r\n        // Invalid cache, continue with API call\r\n        localStorage.removeItem(CACHE_KEY);\r\n      }\r\n    }\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await fetchCurrentWeather(locationParam);\r\n      setWeather(data);\r\n      \r\n      let locationString = '';\r\n      if ('city' in locationParam) {\r\n        locationString = locationParam.city;\r\n      } else {\r\n        locationString = `${locationParam.lat.toFixed(2)}, ${locationParam.lon.toFixed(2)}`;\r\n      }\r\n      setLocation(locationString);\r\n      \r\n      // Cache the weather data for default location\r\n      if (isDefaultLocation) {\r\n        const cacheData: CachedWeatherData = {\r\n          data,\r\n          timestamp: Date.now(),\r\n          location: locationString\r\n        };\r\n        localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to load weather data. Please check the location and try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const getCurrentLocation = useCallback(() => {\r\n    if (navigator.geolocation) {\r\n      setLoading(true);\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          fetchWeather({ \r\n            lat: position.coords.latitude, \r\n            lon: position.coords.longitude \r\n          });\r\n        },\r\n        (error) => {\r\n          setError('Unable to retrieve your location. Please enter it manually.');\r\n          setLoading(false);\r\n        }\r\n      );\r\n    } else {\r\n      setError('Geolocation is not supported by your browser. Please enter your location manually.');\r\n    }\r\n  }, [fetchWeather]);\r\n\r\n  return {\r\n    weather,\r\n    loading,\r\n    error,\r\n    location,\r\n    fetchWeather,\r\n    getCurrentLocation\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}