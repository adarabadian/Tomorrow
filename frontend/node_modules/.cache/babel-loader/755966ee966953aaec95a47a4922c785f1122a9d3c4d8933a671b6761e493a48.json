{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { fetchCurrentWeather } from '../services/weatherService';\nexport const useWeather = () => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [location, setLocation] = useState('');\n  const fetchWeather = useCallback(async locationParam => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await fetchCurrentWeather(locationParam);\n      setWeather(data);\n      if ('city' in locationParam) {\n        setLocation(locationParam.city);\n      } else {\n        setLocation(`${locationParam.lat.toFixed(2)}, ${locationParam.lon.toFixed(2)}`);\n      }\n    } catch (err) {\n      setError('Failed to load weather data. Please check the location and try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const getCurrentLocation = useCallback(() => {\n    if (navigator.geolocation) {\n      setLoading(true);\n      navigator.geolocation.getCurrentPosition(position => {\n        fetchWeather({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        });\n      }, error => {\n        setError('Unable to retrieve your location. Please enter it manually.');\n        setLoading(false);\n      });\n    } else {\n      setError('Geolocation is not supported by your browser. Please enter your location manually.');\n    }\n  }, [fetchWeather]);\n  return {\n    weather,\n    loading,\n    error,\n    location,\n    fetchWeather,\n    getCurrentLocation\n  };\n};\n_s(useWeather, \"ny0UGAEmyS3orp9dHnpy0oSuRcE=\");","map":{"version":3,"names":["useState","useCallback","fetchCurrentWeather","useWeather","_s","weather","setWeather","loading","setLoading","error","setError","location","setLocation","fetchWeather","locationParam","data","city","lat","toFixed","lon","err","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/hooks/useWeather.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { WeatherData } from '../types/weather';\r\nimport { fetchCurrentWeather } from '../services/weatherService';\r\n\r\nexport const useWeather = () => {\r\n  const [weather, setWeather] = useState<WeatherData | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [location, setLocation] = useState<string>('');\r\n\r\n  const fetchWeather = useCallback(async (locationParam: { city: string } | { lat: number; lon: number }) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await fetchCurrentWeather(locationParam);\r\n      setWeather(data);\r\n      \r\n      if ('city' in locationParam) {\r\n        setLocation(locationParam.city);\r\n      } else {\r\n        setLocation(`${locationParam.lat.toFixed(2)}, ${locationParam.lon.toFixed(2)}`);\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to load weather data. Please check the location and try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const getCurrentLocation = useCallback(() => {\r\n    if (navigator.geolocation) {\r\n      setLoading(true);\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          fetchWeather({ \r\n            lat: position.coords.latitude, \r\n            lon: position.coords.longitude \r\n          });\r\n        },\r\n        (error) => {\r\n          setError('Unable to retrieve your location. Please enter it manually.');\r\n          setLoading(false);\r\n        }\r\n      );\r\n    } else {\r\n      setError('Geolocation is not supported by your browser. Please enter your location manually.');\r\n    }\r\n  }, [fetchWeather]);\r\n\r\n  return {\r\n    weather,\r\n    loading,\r\n    error,\r\n    location,\r\n    fetchWeather,\r\n    getCurrentLocation\r\n  };\r\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,SAASC,mBAAmB,QAAQ,4BAA4B;AAEhE,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAqB,IAAI,CAAC;EAChE,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAS,EAAE,CAAC;EAEpD,MAAMa,YAAY,GAAGZ,WAAW,CAAC,MAAOa,aAA8D,IAAK;IACzGN,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMK,IAAI,GAAG,MAAMb,mBAAmB,CAACY,aAAa,CAAC;MACrDR,UAAU,CAACS,IAAI,CAAC;MAEhB,IAAI,MAAM,IAAID,aAAa,EAAE;QAC3BF,WAAW,CAACE,aAAa,CAACE,IAAI,CAAC;MACjC,CAAC,MAAM;QACLJ,WAAW,CAAC,GAAGE,aAAa,CAACG,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC,KAAKJ,aAAa,CAACK,GAAG,CAACD,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;MACjF;IACF,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZV,QAAQ,CAAC,uEAAuE,CAAC;IACnF,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMa,kBAAkB,GAAGpB,WAAW,CAAC,MAAM;IAC3C,IAAIqB,SAAS,CAACC,WAAW,EAAE;MACzBf,UAAU,CAAC,IAAI,CAAC;MAChBc,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;QACZZ,YAAY,CAAC;UACXI,GAAG,EAAEQ,QAAQ,CAACC,MAAM,CAACC,QAAQ;UAC7BR,GAAG,EAAEM,QAAQ,CAACC,MAAM,CAACE;QACvB,CAAC,CAAC;MACJ,CAAC,EACAnB,KAAK,IAAK;QACTC,QAAQ,CAAC,6DAA6D,CAAC;QACvEF,UAAU,CAAC,KAAK,CAAC;MACnB,CACF,CAAC;IACH,CAAC,MAAM;MACLE,QAAQ,CAAC,oFAAoF,CAAC;IAChG;EACF,CAAC,EAAE,CAACG,YAAY,CAAC,CAAC;EAElB,OAAO;IACLR,OAAO;IACPE,OAAO;IACPE,KAAK;IACLE,QAAQ;IACRE,YAAY;IACZQ;EACF,CAAC;AACH,CAAC;AAACjB,EAAA,CArDWD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}