{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adara\\\\Desktop\\\\aaa\\\\Tomorrow\\\\frontend\\\\src\\\\pages\\\\Alerts.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { createAlert, deleteAlert, updateAlert } from '../services/alertService';\nimport { useAlerts } from '../contexts/AlertsContext';\n// Import our components\nimport AlertForm from '../components/AlertForm/AlertForm';\nimport AlertList from '../components/AlertList/AlertList';\nimport AlertEditForm from '../components/AlertEditForm/AlertEditForm';\nimport Notifications from '../components/Notifications/Notifications';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alerts = () => {\n  _s();\n  const {\n    alerts,\n    loading,\n    error,\n    refreshAlerts\n  } = useAlerts();\n\n  // State for UI feedback\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [alertToEdit, setAlertToEdit] = useState(null);\n\n  // Handle alert creation\n  const handleCreateAlert = async alertData => {\n    try {\n      const createdAlert = await createAlert(alertData);\n      setSuccessMessage(`Alert for ${createdAlert.resolvedLocation || alertData.location.city || 'your location'} created successfully!`);\n      refreshAlerts();\n      return Promise.resolve();\n    } catch (err) {\n      const errorMessage = err.message || 'Failed to create alert';\n      setErrorMessage(errorMessage);\n      return Promise.reject(err);\n    }\n  };\n\n  // Edit an alert - called from AlertList\n  const handleEditAlert = async id => {\n    const alertToEdit = alerts.find(alert => alert.id === id || alert._id === id);\n    if (alertToEdit) {\n      setAlertToEdit(alertToEdit);\n      setEditDialogOpen(true);\n    }\n    return Promise.resolve();\n  };\n\n  // Handle alert update submission\n  const handleUpdateAlert = async (id, updatedData) => {\n    try {\n      console.log('Updating alert:', id);\n      console.log('With data:', updatedData);\n\n      // Update the alert on the server\n      const updatedAlert = await updateAlert(id, updatedData);\n      console.log('Server response:', updatedAlert);\n\n      // Explicitly refresh alerts to get the latest data with updated status\n      console.log('Refreshing alerts...');\n      await refreshAlerts();\n\n      // Show success message\n      setSuccessMessage('Alert updated successfully!');\n    } catch (err) {\n      const errorMessage = err.message || 'Failed to update alert';\n      console.error('Error updating alert:', errorMessage);\n      setErrorMessage(errorMessage);\n    }\n  };\n\n  // Delete an alert - returns a Promise for the AlertList component\n  const handleDeleteAlert = async id => {\n    try {\n      await deleteAlert(id);\n      setSuccessMessage('Alert deleted successfully!');\n      await refreshAlerts();\n      return Promise.resolve();\n    } catch (err) {\n      setErrorMessage('Failed to delete alert');\n      return Promise.reject(err);\n    }\n  };\n\n  // Handle alert toggle status (activate/deactivate)\n  const handleToggleAlertStatus = async id => {\n    try {\n      // Find the alert\n      const alertToToggle = alerts.find(alert => alert.id === id || alert._id === id);\n      if (!alertToToggle) {\n        setErrorMessage('Alert not found');\n        return;\n      }\n\n      // Toggle the isTriggered value\n      const newIsTriggered = !alertToToggle.isTriggered;\n      console.log(`Toggling alert ${id} status to: ${newIsTriggered ? 'ACTIVE' : 'INACTIVE'}`);\n\n      // Update with the new isTriggered value\n      await updateAlert(id, {\n        isTriggered: newIsTriggered\n      });\n\n      // Refresh alerts to show updated status\n      await refreshAlerts();\n\n      // Show success message\n      setSuccessMessage(`Alert ${newIsTriggered ? 'activated' : 'deactivated'} successfully!`);\n    } catch (err) {\n      const errorMessage = err.message || 'Failed to toggle alert status';\n      console.error('Error toggling alert status:', errorMessage);\n      setErrorMessage(errorMessage);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Weather Alerts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertForm, {\n      onSubmit: handleCreateAlert,\n      onSuccess: () => {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertList, {\n      alerts: alerts,\n      loading: loading,\n      error: error,\n      onDelete: handleDeleteAlert,\n      onEdit: handleEditAlert,\n      onRefresh: refreshAlerts,\n      onToggleStatus: handleToggleAlertStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), alertToEdit && /*#__PURE__*/_jsxDEV(AlertEditForm, {\n      alert: alertToEdit,\n      open: editDialogOpen,\n      onClose: () => {\n        setEditDialogOpen(false);\n        setAlertToEdit(null);\n      },\n      onSubmit: handleUpdateAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Notifications, {\n      successMessage: successMessage,\n      errorMessage: errorMessage,\n      onClearSuccess: () => setSuccessMessage(null),\n      onClearError: () => setErrorMessage(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(Alerts, \"LIymoYTCjamnM+yy7WHBiQ8dwVs=\", false, function () {\n  return [useAlerts];\n});\n_c = Alerts;\nexport default Alerts;\nvar _c;\n$RefreshReg$(_c, \"Alerts\");","map":{"version":3,"names":["React","useState","Box","Typography","createAlert","deleteAlert","updateAlert","useAlerts","AlertForm","AlertList","AlertEditForm","Notifications","jsxDEV","_jsxDEV","Alerts","_s","alerts","loading","error","refreshAlerts","successMessage","setSuccessMessage","errorMessage","setErrorMessage","editDialogOpen","setEditDialogOpen","alertToEdit","setAlertToEdit","handleCreateAlert","alertData","createdAlert","resolvedLocation","location","city","Promise","resolve","err","message","reject","handleEditAlert","id","find","alert","_id","handleUpdateAlert","updatedData","console","log","updatedAlert","handleDeleteAlert","handleToggleAlertStatus","alertToToggle","newIsTriggered","isTriggered","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onSuccess","onDelete","onEdit","onRefresh","onToggleStatus","open","onClose","onClearSuccess","onClearError","_c","$RefreshReg$"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/pages/Alerts.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Box, Typography } from '@mui/material';\r\nimport { createAlert, deleteAlert, updateAlert } from '../services/alertService';\r\nimport { useAlerts } from '../contexts/AlertsContext';\r\nimport { Alert } from '../types/alert';\r\n\r\n// Import our components\r\nimport AlertForm from '../components/AlertForm/AlertForm';\r\nimport AlertList from '../components/AlertList/AlertList';\r\nimport AlertEditForm from '../components/AlertEditForm/AlertEditForm';\r\nimport Notifications from '../components/Notifications/Notifications';\r\n\r\nconst Alerts: React.FC = () => {\r\n  const { alerts, loading, error, refreshAlerts } = useAlerts();\r\n  \r\n  // State for UI feedback\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\r\n  const [alertToEdit, setAlertToEdit] = useState<Alert | null>(null);\r\n\r\n  // Handle alert creation\r\n  const handleCreateAlert = async (alertData: any) => {\r\n    try {\r\n      const createdAlert = await createAlert(alertData);\r\n      setSuccessMessage(`Alert for ${createdAlert.resolvedLocation || alertData.location.city || 'your location'} created successfully!`);\r\n      refreshAlerts();\r\n      return Promise.resolve();\r\n    } catch (err: any) {\r\n      const errorMessage = err.message || 'Failed to create alert';\r\n      setErrorMessage(errorMessage);\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n\r\n  // Edit an alert - called from AlertList\r\n  const handleEditAlert = async (id: string): Promise<void> => {\r\n    const alertToEdit = alerts.find(alert => alert.id === id || alert._id === id);\r\n    if (alertToEdit) {\r\n      setAlertToEdit(alertToEdit);\r\n      setEditDialogOpen(true);\r\n    }\r\n    return Promise.resolve();\r\n  };\r\n\r\n  // Handle alert update submission\r\n  const handleUpdateAlert = async (id: string, updatedData: Partial<Alert>): Promise<void> => {\r\n    try {\r\n      console.log('Updating alert:', id);\r\n      console.log('With data:', updatedData);\r\n      \r\n      // Update the alert on the server\r\n      const updatedAlert = await updateAlert(id, updatedData);\r\n      console.log('Server response:', updatedAlert);\r\n      \r\n      // Explicitly refresh alerts to get the latest data with updated status\r\n      console.log('Refreshing alerts...');\r\n      await refreshAlerts();\r\n      \r\n      // Show success message\r\n      setSuccessMessage('Alert updated successfully!');\r\n    } catch (err: any) {\r\n      const errorMessage = err.message || 'Failed to update alert';\r\n      console.error('Error updating alert:', errorMessage);\r\n      setErrorMessage(errorMessage);\r\n    }\r\n  };\r\n\r\n  // Delete an alert - returns a Promise for the AlertList component\r\n  const handleDeleteAlert = async (id: string): Promise<void> => {\r\n    try {\r\n      await deleteAlert(id);\r\n      setSuccessMessage('Alert deleted successfully!');\r\n      await refreshAlerts();\r\n      return Promise.resolve();\r\n    } catch (err) {\r\n      setErrorMessage('Failed to delete alert');\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n\r\n  // Handle alert toggle status (activate/deactivate)\r\n  const handleToggleAlertStatus = async (id: string): Promise<void> => {\r\n    try {\r\n      // Find the alert\r\n      const alertToToggle = alerts.find(alert => alert.id === id || alert._id === id);\r\n      if (!alertToToggle) {\r\n        setErrorMessage('Alert not found');\r\n        return;\r\n      }\r\n      \r\n      // Toggle the isTriggered value\r\n      const newIsTriggered = !alertToToggle.isTriggered;\r\n      console.log(`Toggling alert ${id} status to: ${newIsTriggered ? 'ACTIVE' : 'INACTIVE'}`);\r\n      \r\n      // Update with the new isTriggered value\r\n      await updateAlert(id, { \r\n        isTriggered: newIsTriggered\r\n      });\r\n      \r\n      // Refresh alerts to show updated status\r\n      await refreshAlerts();\r\n      \r\n      // Show success message\r\n      setSuccessMessage(`Alert ${newIsTriggered ? 'activated' : 'deactivated'} successfully!`);\r\n    } catch (err: any) {\r\n      const errorMessage = err.message || 'Failed to toggle alert status';\r\n      console.error('Error toggling alert status:', errorMessage);\r\n      setErrorMessage(errorMessage);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Weather Alerts\r\n      </Typography>\r\n      \r\n      {/* Alert Creation Form */}\r\n      <AlertForm \r\n        onSubmit={handleCreateAlert}\r\n        onSuccess={() => {}}\r\n      />\r\n      \r\n      {/* Alert List */}\r\n      <AlertList \r\n        alerts={alerts}\r\n        loading={loading}\r\n        error={error}\r\n        onDelete={handleDeleteAlert}\r\n        onEdit={handleEditAlert}\r\n        onRefresh={refreshAlerts}\r\n        onToggleStatus={handleToggleAlertStatus}\r\n      />\r\n      \r\n      {/* Edit Dialog */}\r\n      {alertToEdit && (\r\n        <AlertEditForm\r\n          alert={alertToEdit}\r\n          open={editDialogOpen}\r\n          onClose={() => {\r\n            setEditDialogOpen(false);\r\n            setAlertToEdit(null);\r\n          }}\r\n          onSubmit={handleUpdateAlert}\r\n        />\r\n      )}\r\n      \r\n      {/* Notifications */}\r\n      <Notifications \r\n        successMessage={successMessage}\r\n        errorMessage={errorMessage}\r\n        onClearSuccess={() => setSuccessMessage(null)}\r\n        onClearError={() => setErrorMessage(null)}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Alerts; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}