{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adara\\\\Desktop\\\\aaa\\\\Tomorrow\\\\frontend\\\\src\\\\components\\\\AlertList\\\\AlertStatusList.tsx\";\nimport React from 'react';\nimport { Paper, Typography, List, Card, CardContent, Box, Avatar } from '@mui/material';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport { getParameterIcon, formatCondition, getParameterName, getParameterUnit } from '../../utils/alertUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AlertStatusList = ({\n  alerts,\n  title,\n  icon = /*#__PURE__*/_jsxDEV(WarningIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this),\n  borderColor = '#f44336',\n  backgroundColor = 'rgba(244, 67, 54, 0.05)',\n  emptyMessage = 'No alerts in this category'\n}) => {\n  if (alerts.length === 0) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      p: 2,\n      mb: 3,\n      borderLeft: `4px solid ${borderColor}`\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        mb: 2,\n        color: borderColor,\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/React.cloneElement(icon, {\n        sx: {\n          mr: 1\n        }\n      }), title, \" (\", alerts.length, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: alerts.map(alert => /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          mb: 2,\n          backgroundColor\n        },\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: \"flex\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                sx: {\n                  bgcolor: borderColor,\n                  mr: 2\n                },\n                children: getParameterIcon(alert.parameter)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 35\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  children: alert.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 39\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  children: [getParameterName(alert.parameter), \" \", formatCondition(alert.parameter, alert.condition, alert.threshold)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 39\n                }, this), alert.location && /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  children: [\"Location:\", \" \", alert.resolvedLocation || (alert.location.city ? alert.location.city : alert.location.coordinates ? `${alert.location.coordinates.lat.toFixed(2)}, ${alert.location.coordinates.lon.toFixed(2)}` : \"Unknown\")]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 43\n                }, this), alert.lastValue && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"text.secondary\",\n                    children: [\"Current value:\", \" \", typeof alert.lastValue === \"number\" ? alert.lastValue.toFixed(2) : alert.lastValue, \" \", getParameterUnit(alert.parameter)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 47\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    color: \"text.secondary\",\n                    children: [\"Last checked:\", \" \", alert.lastChecked ? new Date(alert.lastChecked).toLocaleString() : \"Never\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 47\n                  }, this)]\n                }, void 0, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 23\n        }, this)\n      }, alert.id || alert._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 7\n  }, this);\n};\n_c = AlertStatusList;\nexport default AlertStatusList;\nvar _c;\n$RefreshReg$(_c, \"AlertStatusList\");","map":{"version":3,"names":["React","Paper","Typography","List","Card","CardContent","Box","Avatar","WarningIcon","getParameterIcon","formatCondition","getParameterName","getParameterUnit","jsxDEV","_jsxDEV","Fragment","_Fragment","AlertStatusList","alerts","title","icon","fileName","_jsxFileName","lineNumber","columnNumber","borderColor","backgroundColor","emptyMessage","length","elevation","sx","p","mb","borderLeft","children","variant","color","display","alignItems","cloneElement","mr","map","alert","justifyContent","bgcolor","parameter","name","condition","threshold","location","resolvedLocation","city","coordinates","lat","toFixed","lon","lastValue","lastChecked","Date","toLocaleString","id","_id","_c","$RefreshReg$"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/components/AlertList/AlertStatusList.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  List,\r\n  Card,\r\n  CardContent,\r\n  Box,\r\n  Avatar\r\n} from '@mui/material';\r\nimport WarningIcon from '@mui/icons-material/Warning';\r\nimport { Alert } from '../../types/alert';\r\nimport { getParameterIcon, formatCondition, getParameterName, getParameterUnit } from '../../utils/alertUtils';\r\n\r\ninterface AlertStatusListProps {\r\n  alerts: Alert[];\r\n  title: string;\r\n  icon?: React.ReactElement;\r\n  borderColor?: string;\r\n  backgroundColor?: string;\r\n  emptyMessage?: string;\r\n}\r\n\r\nconst AlertStatusList: React.FC<AlertStatusListProps> = ({\r\n  alerts,\r\n  title,\r\n  icon = <WarningIcon />,\r\n  borderColor = '#f44336',\r\n  backgroundColor = 'rgba(244, 67, 54, 0.05)',\r\n  emptyMessage = 'No alerts in this category'\r\n}) => {\r\n  if (alerts.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n      <Paper\r\n          elevation={3}\r\n          sx={{ p: 2, mb: 3, borderLeft: `4px solid ${borderColor}` }}\r\n      >\r\n          <Typography\r\n              variant=\"h6\"\r\n              sx={{\r\n                  mb: 2,\r\n                  color: borderColor,\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n              }}\r\n          >\r\n              {React.cloneElement(icon, { sx: { mr: 1 } })}\r\n              {title} ({alerts.length})\r\n          </Typography>\r\n\r\n          <List>\r\n              {alerts.map((alert: Alert) => (\r\n                  <Card\r\n                      key={alert.id || alert._id}\r\n                      sx={{\r\n                          mb: 2,\r\n                          backgroundColor,\r\n                      }}\r\n                  >\r\n                      <CardContent>\r\n                          <Box\r\n                              sx={{\r\n                                  display: \"flex\",\r\n                                  justifyContent: \"space-between\",\r\n                                  alignItems: \"center\",\r\n                              }}\r\n                          >\r\n                              <Box\r\n                                  sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                              >\r\n                                  <Avatar\r\n                                      sx={{\r\n                                          bgcolor: borderColor,\r\n                                          mr: 2,\r\n                                      }}\r\n                                  >\r\n                                      {getParameterIcon(alert.parameter)}\r\n                                  </Avatar>\r\n                                  <Box>\r\n                                      <Typography variant=\"h6\">\r\n                                          {alert.name}\r\n                                      </Typography>\r\n                                      <Typography\r\n                                          variant=\"body2\"\r\n                                          color=\"text.secondary\"\r\n                                      >\r\n                                          {getParameterName(alert.parameter)}{\" \"}\r\n                                          {formatCondition(\r\n                                              alert.parameter,\r\n                                              alert.condition,\r\n                                              alert.threshold\r\n                                          )}\r\n                                      </Typography>\r\n                                      {alert.location && (\r\n                                          <Typography\r\n                                              variant=\"body2\"\r\n                                              color=\"text.secondary\"\r\n                                          >\r\n                                              Location:{\" \"}\r\n                                              {alert.resolvedLocation ||\r\n                                                  (alert.location.city\r\n                                                      ? alert.location.city\r\n                                                      : alert.location\r\n                                                            .coordinates\r\n                                                      ? `${alert.location.coordinates.lat.toFixed(\r\n                                                            2\r\n                                                        )}, ${alert.location.coordinates.lon.toFixed(\r\n                                                            2\r\n                                                        )}`\r\n                                                      : \"Unknown\")}\r\n                                          </Typography>\r\n                                      )}\r\n                                      {alert.lastValue && (\r\n                                          <>\r\n                                              <Typography\r\n                                                  variant=\"body2\"\r\n                                                  color=\"text.secondary\"\r\n                                              >\r\n                                                  Current value:{\" \"}\r\n                                                  {typeof alert.lastValue ===\r\n                                                  \"number\"\r\n                                                      ? alert.lastValue.toFixed(\r\n                                                            2\r\n                                                        )\r\n                                                      : alert.lastValue}{\" \"}\r\n                                                  {getParameterUnit(\r\n                                                      alert.parameter\r\n                                                  )}\r\n                                              </Typography>\r\n                                              <Typography\r\n                                                  variant=\"body2\"\r\n                                                  color=\"text.secondary\"\r\n                                              >\r\n                                                  Last checked:{\" \"}\r\n                                                  {alert.lastChecked\r\n                                                      ? new Date(\r\n                                                            alert.lastChecked\r\n                                                        ).toLocaleString()\r\n                                                      : \"Never\"}\r\n                                                  \r\n                                              </Typography>\r\n                                          </>\r\n                                      )}\r\n                                  </Box>\r\n                              </Box>\r\n                          </Box>\r\n                      </CardContent>\r\n                  </Card>\r\n              ))}\r\n          </List>\r\n      </Paper>\r\n  );\r\n};\r\n\r\nexport default AlertStatusList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}