{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adara\\\\Desktop\\\\aaa\\\\Tomorrow\\\\frontend\\\\src\\\\contexts\\\\AlertsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { getAlerts } from '../services/alertService';\nimport { Snackbar, Alert as MuiAlert } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlertsContext = /*#__PURE__*/createContext(undefined);\nexport const AlertsProvider = ({\n  children\n}) => {\n  _s();\n  const [alerts, setAlerts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [notification, setNotification] = useState(null);\n  const refreshAlerts = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('Refreshing alerts from server...');\n      // Force-fetch the latest data from the server\n      const data = await getAlerts();\n      console.log('Got alerts from server:', data);\n\n      // Map the alerts to ensure isTriggered is correctly calculated\n      if (data && Array.isArray(data)) {\n        console.log(`Processed ${data.length} alerts with recalculated status`);\n\n        // Check for newly triggered alerts by comparing with previous state\n        if (alerts.length > 0) {\n          const newlyTriggered = data.filter(newAlert => newAlert.isTriggered && !alerts.some(oldAlert => oldAlert.id === newAlert.id && oldAlert.isTriggered));\n\n          // Show notification for the first newly triggered alert\n          if (newlyTriggered.length > 0) {\n            const triggerAlert = newlyTriggered[0];\n            setNotification({\n              message: `Alert: \"${triggerAlert.name}\" has been triggered!`,\n              id: triggerAlert.id\n            });\n          }\n        }\n        setAlerts(data);\n        setLastUpdated(new Date());\n      } else {\n        console.error('Invalid alert data received:', data);\n        setError('Failed to process alert data');\n      }\n    } catch (err) {\n      console.error('Failed to load alerts:', err);\n      setError('Failed to load alerts');\n    } finally {\n      setLoading(false);\n    }\n  }, [alerts]);\n\n  // Initial load\n  useEffect(() => {\n    refreshAlerts();\n  }, [refreshAlerts]);\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(refreshAlerts, 30000);\n    return () => clearInterval(interval);\n  }, [refreshAlerts]);\n\n  // Clear notification after 6 seconds\n  const handleCloseNotification = () => {\n    setNotification(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AlertsContext.Provider, {\n    value: {\n      alerts,\n      loading,\n      error,\n      refreshAlerts,\n      lastUpdated\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!notification,\n      autoHideDuration: 6000,\n      onClose: handleCloseNotification,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      children: notification && /*#__PURE__*/_jsxDEV(MuiAlert, {\n        onClose: handleCloseNotification,\n        severity: \"warning\",\n        variant: \"filled\",\n        sx: {\n          width: '100%'\n        },\n        children: notification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(AlertsProvider, \"hgSILBupGgye/WtGBZISoa4o4M4=\");\n_c = AlertsProvider;\nexport const useAlerts = () => {\n  _s2();\n  const context = useContext(AlertsContext);\n  if (context === undefined) {\n    throw new Error('useAlerts must be used within an AlertsProvider');\n  }\n  return context;\n};\n_s2(useAlerts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AlertsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","getAlerts","Snackbar","Alert","MuiAlert","jsxDEV","_jsxDEV","AlertsContext","undefined","AlertsProvider","children","_s","alerts","setAlerts","loading","setLoading","error","setError","lastUpdated","setLastUpdated","notification","setNotification","refreshAlerts","console","log","data","Array","isArray","length","newlyTriggered","filter","newAlert","isTriggered","some","oldAlert","id","triggerAlert","message","name","Date","err","interval","setInterval","clearInterval","handleCloseNotification","Provider","value","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","variant","sx","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAlerts","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/contexts/AlertsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport { Alert } from '../types/alert';\r\nimport { getAlerts } from '../services/alertService';\r\nimport { Snackbar, Alert as MuiAlert } from '@mui/material';\r\n\r\ninterface AlertsContextType {\r\n  alerts: Alert[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refreshAlerts: () => Promise<void>;\r\n  lastUpdated: Date | null;\r\n}\r\n\r\nconst AlertsContext = createContext<AlertsContextType | undefined>(undefined);\r\n\r\nexport const AlertsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [alerts, setAlerts] = useState<Alert[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n  const [notification, setNotification] = useState<{ message: string, id: string } | null>(null);\r\n\r\n  const refreshAlerts = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log('Refreshing alerts from server...');\r\n      // Force-fetch the latest data from the server\r\n      const data = await getAlerts();\r\n      console.log('Got alerts from server:', data);\r\n      \r\n      // Map the alerts to ensure isTriggered is correctly calculated\r\n      if (data && Array.isArray(data)) {\r\n        console.log(`Processed ${data.length} alerts with recalculated status`);\r\n        \r\n        // Check for newly triggered alerts by comparing with previous state\r\n        if (alerts.length > 0) {\r\n          const newlyTriggered = data.filter(newAlert => \r\n            newAlert.isTriggered && \r\n            !alerts.some(oldAlert => \r\n              oldAlert.id === newAlert.id && oldAlert.isTriggered\r\n            )\r\n          );\r\n          \r\n          // Show notification for the first newly triggered alert\r\n          if (newlyTriggered.length > 0) {\r\n            const triggerAlert = newlyTriggered[0];\r\n            setNotification({\r\n              message: `Alert: \"${triggerAlert.name}\" has been triggered!`,\r\n              id: triggerAlert.id\r\n            });\r\n          }\r\n        }\r\n        \r\n        setAlerts(data);\r\n        setLastUpdated(new Date());\r\n      } else {\r\n        console.error('Invalid alert data received:', data);\r\n        setError('Failed to process alert data');\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to load alerts:', err);\r\n      setError('Failed to load alerts');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [alerts]);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    refreshAlerts();\r\n  }, [refreshAlerts]);\r\n\r\n  // Auto-refresh every 30 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(refreshAlerts, 30000);\r\n    return () => clearInterval(interval);\r\n  }, [refreshAlerts]);\r\n\r\n  // Clear notification after 6 seconds\r\n  const handleCloseNotification = () => {\r\n    setNotification(null);\r\n  };\r\n\r\n  return (\r\n    <AlertsContext.Provider value={{ alerts, loading, error, refreshAlerts, lastUpdated }}>\r\n      {children}\r\n      \r\n      {/* Alert notification */}\r\n      <Snackbar\r\n        open={!!notification}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseNotification}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      >\r\n        {notification && (\r\n          <MuiAlert\r\n            onClose={handleCloseNotification}\r\n            severity=\"warning\"\r\n            variant=\"filled\"\r\n            sx={{ width: '100%' }}\r\n          >\r\n            {notification.message}\r\n          </MuiAlert>\r\n        )}\r\n      </Snackbar>\r\n    </AlertsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAlerts = () => {\r\n  const context = useContext(AlertsContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAlerts must be used within an AlertsProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}