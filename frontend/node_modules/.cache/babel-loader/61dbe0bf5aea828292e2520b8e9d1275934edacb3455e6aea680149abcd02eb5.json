{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adara\\\\Desktop\\\\aaa\\\\Tomorrow\\\\frontend\\\\src\\\\contexts\\\\AlertsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { getAlerts } from '../services/alertService';\nimport { Snackbar, Alert as MuiAlert } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlertsContext = /*#__PURE__*/createContext(undefined);\nexport const AlertsProvider = ({\n  children\n}) => {\n  _s();\n  const [alerts, setAlerts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [notification, setNotification] = useState(null);\n  const previousAlertsRef = useRef([]);\n  const refreshAlerts = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('Refreshing alerts from server...');\n      // Force-fetch the latest data from the server\n      const data = await getAlerts();\n      console.log('Got alerts from server:', data);\n\n      // Map the alerts to ensure isTriggered is correctly calculated\n      if (data && Array.isArray(data)) {\n        console.log(`Processed ${data.length} alerts with recalculated status`);\n\n        // Check for newly triggered alerts by comparing with previous state\n        if (previousAlertsRef.current.length > 0) {\n          const newlyTriggered = data.filter(newAlert => newAlert.isTriggered && !previousAlertsRef.current.some(oldAlert => oldAlert.id === newAlert.id && oldAlert.isTriggered));\n\n          // Show notification for the first newly triggered alert\n          if (newlyTriggered.length > 0) {\n            const triggerAlert = newlyTriggered[0];\n            setNotification({\n              message: `Alert: \"${triggerAlert.name}\" has been triggered!`,\n              id: triggerAlert.id\n            });\n          }\n        }\n        previousAlertsRef.current = data;\n        setAlerts(data);\n        setLastUpdated(new Date());\n      } else {\n        console.error('Invalid alert data received:', data);\n        setError('Failed to process alert data');\n      }\n    } catch (err) {\n      console.error('Failed to load alerts:', err);\n      setError('Failed to load alerts');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Initial load\n  useEffect(() => {\n    refreshAlerts();\n  }, [refreshAlerts]);\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(refreshAlerts, 30000);\n    return () => clearInterval(interval);\n  }, [refreshAlerts]);\n\n  // Clear notification after 6 seconds\n  const handleCloseNotification = () => {\n    setNotification(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AlertsContext.Provider, {\n    value: {\n      alerts,\n      loading,\n      error,\n      refreshAlerts,\n      lastUpdated\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!notification,\n      autoHideDuration: 6000,\n      onClose: handleCloseNotification,\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      children: /*#__PURE__*/_jsxDEV(MuiAlert, {\n        onClose: handleCloseNotification,\n        severity: \"warning\",\n        variant: \"filled\",\n        sx: {\n          width: '100%'\n        },\n        children: (notification === null || notification === void 0 ? void 0 : notification.message) || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(AlertsProvider, \"PqRoNI33Ususa73a0KqYsPemlJg=\");\n_c = AlertsProvider;\nexport const useAlerts = () => {\n  _s2();\n  const context = useContext(AlertsContext);\n  if (context === undefined) throw new Error('useAlerts must be used within an AlertsProvider');\n  return context;\n};\n_s2(useAlerts, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AlertsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","getAlerts","Snackbar","Alert","MuiAlert","jsxDEV","_jsxDEV","AlertsContext","undefined","AlertsProvider","children","_s","alerts","setAlerts","loading","setLoading","error","setError","lastUpdated","setLastUpdated","notification","setNotification","previousAlertsRef","refreshAlerts","console","log","data","Array","isArray","length","current","newlyTriggered","filter","newAlert","isTriggered","some","oldAlert","id","triggerAlert","message","name","Date","err","interval","setInterval","clearInterval","handleCloseNotification","Provider","value","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","variant","sx","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAlerts","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/contexts/AlertsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\r\nimport { Alert } from '../types/alert';\r\nimport { getAlerts } from '../services/alertService';\r\nimport { Snackbar, Alert as MuiAlert } from '@mui/material';\r\n\r\ninterface AlertsContextType {\r\n  alerts: Alert[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refreshAlerts: () => Promise<void>;\r\n  lastUpdated: Date | null;\r\n}\r\n\r\nconst AlertsContext = createContext<AlertsContextType | undefined>(undefined);\r\n\r\nexport const AlertsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [alerts, setAlerts] = useState<Alert[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\r\n  const [notification, setNotification] = useState<{ message: string, id: string } | null>(null);\r\n  const previousAlertsRef = useRef<Alert[]>([]);\r\n\r\n  const refreshAlerts = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log('Refreshing alerts from server...');\r\n      // Force-fetch the latest data from the server\r\n      const data = await getAlerts();\r\n      console.log('Got alerts from server:', data);\r\n      \r\n      // Map the alerts to ensure isTriggered is correctly calculated\r\n      if (data && Array.isArray(data)) {\r\n        console.log(`Processed ${data.length} alerts with recalculated status`);\r\n        \r\n        // Check for newly triggered alerts by comparing with previous state\r\n        if (previousAlertsRef.current.length > 0) {\r\n          const newlyTriggered = data.filter(newAlert => \r\n            newAlert.isTriggered && \r\n            !previousAlertsRef.current.some(oldAlert => \r\n              oldAlert.id === newAlert.id && oldAlert.isTriggered\r\n            )\r\n          );\r\n          \r\n          // Show notification for the first newly triggered alert\r\n          if (newlyTriggered.length > 0) {\r\n            const triggerAlert = newlyTriggered[0];\r\n            setNotification({\r\n              message: `Alert: \"${triggerAlert.name}\" has been triggered!`,\r\n              id: triggerAlert.id\r\n            });\r\n          }\r\n        }\r\n        \r\n        previousAlertsRef.current = data;\r\n        setAlerts(data);\r\n        setLastUpdated(new Date());\r\n      } else {\r\n        console.error('Invalid alert data received:', data);\r\n        setError('Failed to process alert data');\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to load alerts:', err);\r\n      setError('Failed to load alerts');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    refreshAlerts();\r\n  }, [refreshAlerts]);\r\n\r\n  // Auto-refresh every 30 seconds\r\n  useEffect(() => {\r\n    const interval = setInterval(refreshAlerts, 30000);\r\n    return () => clearInterval(interval);\r\n  }, [refreshAlerts]);\r\n\r\n  // Clear notification after 6 seconds\r\n  const handleCloseNotification = () => {\r\n    setNotification(null);\r\n  };\r\n\r\n  return (\r\n    <AlertsContext.Provider value={{ alerts, loading, error, refreshAlerts, lastUpdated }}>\r\n      {children}\r\n      \r\n      {/* Alert notification */}\r\n      <Snackbar\r\n        open={!!notification}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseNotification}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      >\r\n        <MuiAlert\r\n          onClose={handleCloseNotification}\r\n          severity=\"warning\"\r\n          variant=\"filled\"\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {notification?.message || ''}\r\n        </MuiAlert>\r\n      </Snackbar>\r\n    </AlertsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAlerts = () => {\r\n  const context = useContext(AlertsContext);\r\n  if (context === undefined) throw new Error('useAlerts must be used within an AlertsProvider');\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}