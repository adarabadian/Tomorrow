{"ast":null,"code":"import React from 'react';\nimport ThermometerIcon from '@mui/icons-material/Thermostat';\nimport AirIcon from '@mui/icons-material/Air';\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\n\n// Define parameter and condition types\n\n// Structured parameter data for better organization\nexport const PARAMETER_DATA = {\n  temperature: {\n    label: 'Temperature',\n    icon: ThermometerIcon,\n    unit: '°C',\n    aliases: ['temp']\n  },\n  windSpeed: {\n    label: 'Wind Speed',\n    icon: AirIcon,\n    unit: 'm/s',\n    aliases: ['wind_speed']\n  },\n  precipitation: {\n    label: 'Precipitation',\n    icon: WaterDropIcon,\n    unit: 'mm',\n    aliases: []\n  },\n  humidity: {\n    label: 'Humidity',\n    icon: WaterDropIcon,\n    unit: '%',\n    aliases: []\n  }\n};\n\n// Parameters for UI dropdown\nexport const PARAMETERS = Object.entries(PARAMETER_DATA).map(_c = ([value, data]) => ({\n  value,\n  label: data.label,\n  icon: /*#__PURE__*/React.createElement(data.icon),\n  unit: data.unit\n}));\n\n// Structured condition data\n_c2 = PARAMETERS;\nexport const CONDITION_DATA = {\n  '>': {\n    label: 'Greater than (>)',\n    text: 'greater than',\n    aliases: ['gt']\n  },\n  '<': {\n    label: 'Less than (<)',\n    text: 'less than',\n    aliases: ['lt']\n  },\n  '>=': {\n    label: 'Greater than or equal to (>=)',\n    text: 'greater than or equal to',\n    aliases: []\n  },\n  '<=': {\n    label: 'Less than or equal to (<=)',\n    text: 'less than or equal to',\n    aliases: []\n  },\n  '==': {\n    label: 'Equal to (==)',\n    text: 'equal to',\n    aliases: ['eq']\n  }\n};\n\n// Conditions for UI dropdown\nexport const CONDITIONS = Object.entries(CONDITION_DATA).map(_c3 = ([value, data]) => ({\n  value,\n  label: data.label\n}));\n\n// Default alert configuration\n_c4 = CONDITIONS;\nexport const DEFAULT_ALERT = {\n  name: '',\n  location: {\n    city: ''\n  },\n  parameter: 'temperature',\n  condition: '>',\n  threshold: 0,\n  description: '',\n  userEmail: ''\n};\n\n// Helper function to normalize parameters (handle aliases)\nconst normalizeParameter = parameter => {\n  for (const [key, data] of Object.entries(PARAMETER_DATA)) {\n    if (key === parameter || data.aliases.includes(parameter)) {\n      return key;\n    }\n  }\n  return 'temperature'; // Default fallback\n};\n\n// Helper function to normalize conditions (handle aliases)\nconst normalizeCondition = condition => {\n  for (const [key, data] of Object.entries(CONDITION_DATA)) {\n    if (key === condition || data.aliases.includes(condition)) {\n      return key;\n    }\n  }\n  return '>'; // Default fallback\n};\n\n// Helper function to convert condition to readable text\nexport const getConditionText = condition => {\n  const normalizedCondition = normalizeCondition(condition);\n  return CONDITION_DATA[normalizedCondition].text;\n};\n\n// Helper function to get the parameter name\nexport const getParameterName = parameter => {\n  const normalizedParam = normalizeParameter(parameter);\n  return PARAMETER_DATA[normalizedParam].label;\n};\n\n// Helper function to get the parameter icon\nexport const getParameterIcon = parameter => {\n  const normalizedParam = normalizeParameter(parameter);\n  const IconComponent = PARAMETER_DATA[normalizedParam].icon;\n  return /*#__PURE__*/React.createElement(IconComponent);\n};\n\n// Helper function to get parameter unit\nexport const getParameterUnit = parameter => {\n  const normalizedParam = normalizeParameter(parameter);\n  return PARAMETER_DATA[normalizedParam].unit;\n};\n\n// Format a condition for display\nexport const formatCondition = (parameter, condition, threshold) => {\n  return `${getConditionText(condition)} ${threshold}${getParameterUnit(parameter)}`;\n};\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"PARAMETERS$Object.entries(PARAMETER_DATA).map\");\n$RefreshReg$(_c2, \"PARAMETERS\");\n$RefreshReg$(_c3, \"CONDITIONS$Object.entries(CONDITION_DATA).map\");\n$RefreshReg$(_c4, \"CONDITIONS\");","map":{"version":3,"names":["React","ThermometerIcon","AirIcon","WaterDropIcon","PARAMETER_DATA","temperature","label","icon","unit","aliases","windSpeed","precipitation","humidity","PARAMETERS","Object","entries","map","_c","value","data","createElement","_c2","CONDITION_DATA","text","CONDITIONS","_c3","_c4","DEFAULT_ALERT","name","location","city","parameter","condition","threshold","description","userEmail","normalizeParameter","key","includes","normalizeCondition","getConditionText","normalizedCondition","getParameterName","normalizedParam","getParameterIcon","IconComponent","getParameterUnit","formatCondition","$RefreshReg$"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/utils/alertUtils.ts"],"sourcesContent":["import React from 'react';\r\nimport ThermometerIcon from '@mui/icons-material/Thermostat';\r\nimport AirIcon from '@mui/icons-material/Air';\r\nimport WaterDropIcon from '@mui/icons-material/WaterDrop';\r\n\r\n// Define parameter and condition types\r\nexport type ParameterType = 'temperature' | 'windSpeed' | 'precipitation' | 'humidity' | 'temp' | 'wind_speed';\r\nexport type ConditionType = '>' | '<' | '>=' | '<=' | '==' | 'gt' | 'lt' | 'eq';\r\n\r\n// Structured parameter data for better organization\r\nexport const PARAMETER_DATA = {\r\n  temperature: { label: 'Temperature', icon: ThermometerIcon, unit: '°C', aliases: ['temp'] },\r\n  windSpeed: { label: 'Wind Speed', icon: AirIcon, unit: 'm/s', aliases: ['wind_speed'] },\r\n  precipitation: { label: 'Precipitation', icon: WaterDropIcon, unit: 'mm', aliases: [] },\r\n  humidity: { label: 'Humidity', icon: WaterDropIcon, unit: '%', aliases: [] }\r\n};\r\n\r\n// Parameters for UI dropdown\r\nexport const PARAMETERS = Object.entries(PARAMETER_DATA).map(([value, data]) => ({\r\n  value,\r\n  label: data.label,\r\n  icon: React.createElement(data.icon),\r\n  unit: data.unit\r\n}));\r\n\r\n// Structured condition data\r\nexport const CONDITION_DATA = {\r\n  '>': { label: 'Greater than (>)', text: 'greater than', aliases: ['gt'] },\r\n  '<': { label: 'Less than (<)', text: 'less than', aliases: ['lt'] },\r\n  '>=': { label: 'Greater than or equal to (>=)', text: 'greater than or equal to', aliases: [] },\r\n  '<=': { label: 'Less than or equal to (<=)', text: 'less than or equal to', aliases: [] },\r\n  '==': { label: 'Equal to (==)', text: 'equal to', aliases: ['eq'] }\r\n};\r\n\r\n// Conditions for UI dropdown\r\nexport const CONDITIONS = Object.entries(CONDITION_DATA).map(([value, data]) => ({\r\n  value,\r\n  label: data.label\r\n}));\r\n\r\n// Default alert configuration\r\nexport const DEFAULT_ALERT = {\r\n  name: '',\r\n  location: { city: '' },\r\n  parameter: 'temperature' as ParameterType,\r\n  condition: '>' as ConditionType,\r\n  threshold: 0,\r\n  description: '',\r\n  userEmail: ''\r\n};\r\n\r\n// Helper function to normalize parameters (handle aliases)\r\nconst normalizeParameter = (parameter: string): keyof typeof PARAMETER_DATA => {\r\n  for (const [key, data] of Object.entries(PARAMETER_DATA)) {\r\n    if (key === parameter || data.aliases.includes(parameter)) {\r\n      return key as keyof typeof PARAMETER_DATA;\r\n    }\r\n  }\r\n  return 'temperature'; // Default fallback\r\n};\r\n\r\n// Helper function to normalize conditions (handle aliases)\r\nconst normalizeCondition = (condition: string): keyof typeof CONDITION_DATA => {\r\n  for (const [key, data] of Object.entries(CONDITION_DATA)) {\r\n    if (key === condition || data.aliases.includes(condition)) {\r\n      return key as keyof typeof CONDITION_DATA;\r\n    }\r\n  }\r\n  return '>'; // Default fallback\r\n};\r\n\r\n// Helper function to convert condition to readable text\r\nexport const getConditionText = (condition: string): string => {\r\n  const normalizedCondition = normalizeCondition(condition);\r\n  return CONDITION_DATA[normalizedCondition].text;\r\n};\r\n\r\n// Helper function to get the parameter name\r\nexport const getParameterName = (parameter: string): string => {\r\n  const normalizedParam = normalizeParameter(parameter);\r\n  return PARAMETER_DATA[normalizedParam].label;\r\n};\r\n\r\n// Helper function to get the parameter icon\r\nexport const getParameterIcon = (parameter: string): React.ReactNode => {\r\n  const normalizedParam = normalizeParameter(parameter);\r\n  const IconComponent = PARAMETER_DATA[normalizedParam].icon;\r\n  return React.createElement(IconComponent);\r\n};\r\n\r\n// Helper function to get parameter unit\r\nexport const getParameterUnit = (parameter: string): string => {\r\n  const normalizedParam = normalizeParameter(parameter);\r\n  return PARAMETER_DATA[normalizedParam].unit;\r\n};\r\n\r\n// Format a condition for display\r\nexport const formatCondition = (parameter: string, condition: string, threshold: number): string => {\r\n  return `${getConditionText(condition)} ${threshold}${getParameterUnit(parameter)}`;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}