{"ast":null,"code":"// Helper function to map the backend Alert model to our frontend Alert model\nexport const mapBackendAlert = backendAlert => {\n  return {\n    id: backendAlert.id || backendAlert._id,\n    _id: backendAlert._id || backendAlert.id,\n    name: backendAlert.name,\n    location: backendAlert.location,\n    resolvedLocation: backendAlert.resolvedLocation,\n    parameter: backendAlert.parameter,\n    threshold: backendAlert.threshold,\n    condition: backendAlert.condition,\n    description: backendAlert.description,\n    userEmail: backendAlert.userEmail || '',\n    status: backendAlert.status || (backendAlert.isTriggered ? 'active' : 'inactive'),\n    isTriggered: backendAlert.isTriggered || false,\n    lastChecked: backendAlert.lastChecked || new Date().toISOString(),\n    lastRead: backendAlert.lastRead\n  };\n};","map":{"version":3,"names":["mapBackendAlert","backendAlert","id","_id","name","location","resolvedLocation","parameter","threshold","condition","description","userEmail","status","isTriggered","lastChecked","Date","toISOString","lastRead"],"sources":["C:/Users/adara/Desktop/aaa/Tomorrow/frontend/src/types/alert.ts"],"sourcesContent":["export interface Alert {\r\n  id: string;\r\n  _id: string; // MongoDB-style ID for compatibility\r\n  name: string;\r\n  location: {\r\n    city?: string;\r\n    coordinates?: {\r\n      lat: number;\r\n      lon: number;\r\n    };\r\n  };\r\n  resolvedLocation?: string;\r\n  parameter: string;\r\n  threshold: number;\r\n  condition: string;\r\n  userEmail: string;\r\n  description?: string;\r\n  status: 'active' | 'inactive';\r\n  isTriggered: boolean;\r\n  lastChecked: string;\r\n  lastRead?: string;\r\n}\r\n\r\nexport interface CreateAlertPayload {\r\n  name: string;\r\n  location: {\r\n    city?: string;\r\n    coordinates?: {\r\n      lat: number;\r\n      lon: number;\r\n    };\r\n  };\r\n  parameter: string;\r\n  threshold: number;\r\n  condition: string;\r\n  description?: string;\r\n  userEmail: string;\r\n}\r\n\r\nexport interface AlertSummary {\r\n  id: string;\r\n  name: string;\r\n  parameter: string;\r\n  isTriggered: boolean;\r\n}\r\n\r\n// Helper function to map the backend Alert model to our frontend Alert model\r\nexport const mapBackendAlert = (backendAlert: any): Alert => {\r\n  return {\r\n    id: backendAlert.id || backendAlert._id,\r\n    _id: backendAlert._id || backendAlert.id,\r\n    name: backendAlert.name,\r\n    location: backendAlert.location,\r\n    resolvedLocation: backendAlert.resolvedLocation,\r\n    parameter: backendAlert.parameter,\r\n    threshold: backendAlert.threshold,\r\n    condition: backendAlert.condition,\r\n    description: backendAlert.description,\r\n    userEmail: backendAlert.userEmail || '',\r\n    status: backendAlert.status || (backendAlert.isTriggered ? 'active' : 'inactive'),\r\n    isTriggered: backendAlert.isTriggered || false,\r\n    lastChecked: backendAlert.lastChecked || new Date().toISOString(),\r\n    lastRead: backendAlert.lastRead\r\n  };\r\n}; "],"mappings":"AA8CA;AACA,OAAO,MAAMA,eAAe,GAAIC,YAAiB,IAAY;EAC3D,OAAO;IACLC,EAAE,EAAED,YAAY,CAACC,EAAE,IAAID,YAAY,CAACE,GAAG;IACvCA,GAAG,EAAEF,YAAY,CAACE,GAAG,IAAIF,YAAY,CAACC,EAAE;IACxCE,IAAI,EAAEH,YAAY,CAACG,IAAI;IACvBC,QAAQ,EAAEJ,YAAY,CAACI,QAAQ;IAC/BC,gBAAgB,EAAEL,YAAY,CAACK,gBAAgB;IAC/CC,SAAS,EAAEN,YAAY,CAACM,SAAS;IACjCC,SAAS,EAAEP,YAAY,CAACO,SAAS;IACjCC,SAAS,EAAER,YAAY,CAACQ,SAAS;IACjCC,WAAW,EAAET,YAAY,CAACS,WAAW;IACrCC,SAAS,EAAEV,YAAY,CAACU,SAAS,IAAI,EAAE;IACvCC,MAAM,EAAEX,YAAY,CAACW,MAAM,KAAKX,YAAY,CAACY,WAAW,GAAG,QAAQ,GAAG,UAAU,CAAC;IACjFA,WAAW,EAAEZ,YAAY,CAACY,WAAW,IAAI,KAAK;IAC9CC,WAAW,EAAEb,YAAY,CAACa,WAAW,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACjEC,QAAQ,EAAEhB,YAAY,CAACgB;EACzB,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}